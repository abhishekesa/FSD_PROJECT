<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Superuser Portal</title>
    <style>
      /* Global Reset */
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        min-height: 100vh;
        background-color: #f2f2f2;
        font-family: Arial, sans-serif;
        justify-content: center;
        align-items: center;
        padding: 20px;
      }

      .container {
        width: 90%;
        max-width: 1200px;
        background-color: #fff;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        margin: auto; /* Center horizontally */
        margin-top: 50px; /* Adjust the top margin as needed */
      }

      .reviews-container {
        display: none; /* Hide reviews by default */
        padding: 20px;
      }

      .reviews-container h2 {
        font-size: 24px;
        color: #333;
        margin-bottom: 15px;
      }

      .reviews-container ul {
        list-style: none;
        padding: 0;
      }

      .reviews-container li {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
      }

      .users-container {
        padding: 20px;
      }

      .users-container h2 {
        font-size: 24px;
        color: #333;
        margin-bottom: 15px;
      }

      .users-container ul {
        list-style: none;
        padding: 0;
      }

      .users-container button {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
        cursor: pointer;
        border: none;
        outline: none;
        display: block;
        width: 100%;
        text-align: left;
      }

      .user-details {
        margin-top: 20px;
        padding: 20px;
        border-radius: 5px;
        text-align: left;
      }

      h1 {
        text-align: center;
        font-size: 36px;
        color: #333;
        margin-bottom: 20px;
      }

      #showReviewsBtn {
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
        cursor: pointer;
        border: none;
        outline: none;
        width: 100%;
        text-align: center;
      }

      /* Form Styles */
      #updateUserRoleForm {
        display: none; /* Hide form by default */
        margin-top: 20px;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        background-color: #f9f9f9;
      }

      #updateUserRoleForm label {
        display: block;
        margin-bottom: 10px;
      }

      #updateUserRoleForm select {
        width: 100%;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        outline: none;
      }

      #updateUserRoleForm button {
        margin-top: 10px;
        padding: 10px;
        border-radius: 5px;
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
        outline: none;
      }

      .delete-review-btn {
        background-color: red;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        float: right; /* Align to the right */
      }
      *{
        text-align: center;
      }
    </style>
  </head>
  <body>
    <h1>Welcome Superuser!</h1>
    <div class="container">
      <div class="reviews-container" id="reviewsContainer">
        <h2>All Reviews:</h2>
        <ul>
          <% reviews.forEach(review => { %> <% const user = users.find(user =>
          user._id.toString() === review.userId.toString()); %>
          <li>
            <%= user ? user.name : 'Unknown' %> : <%= review.movieName %> : <%=
            review.reviewText %>
            <button
              class="delete-review-btn"
              data-review-id="<%= review._id %>"
            >
              Delete
            </button>
          </li>
          <% }); %>
        </ul>
      </div>

      <button id="showReviewsBtn">Show Reviews</button>

      <table>
        <tr>
          <th>
            <div class="users-container" id="userListContainer">
              <h2>All User Details:</h2>
              <div id="userList">
                <% users.forEach(user => { %> <% if (user.role !== 'superuser')
                { %>
                <button class="user-button" data-user-id="<%= user._id %>">
                  <%= user.name %>
                </button>
                <% } %> <% }); %>
              </div>
            </div>
          </th>

          <th style="margin-top: 0px">
            <div class="show_details"></div>
            <div class="user-details-container" id="userDetailsContainer"></div>
          </th>

          <th>
            <!-- Form to update user's role -->
            <form id="updateUserRoleForm">
              <label for="role">Update User Role:</label>
              <select id="role" name="role">
                <option value="admin">Admin</option>
                <option value="superuser">Superuser</option>
                <option value="normaluser">Normal User</option>
                <option value="guest">Guest</option>
              </select>
              <button type="submit">Update</button>
            </form>
          </th>
        </tr>
      </table>
    </div>
    <a href="/index?superuser=true">back</a>

    <script>
      const reviewsContainer = document.getElementById("reviewsContainer");
      document.addEventListener("DOMContentLoaded", () => {
        const userList = document.getElementById("userList");
        const userDetailsContainer = document.getElementById(
          "userDetailsContainer"
        );

        const showReviewsBtn = document.getElementById("showReviewsBtn");
        const updateUserRoleForm =
          document.getElementById("updateUserRoleForm");

        userList.addEventListener("click", async (event) => {
          if (event.target.classList.contains("user-button")) {
            const userId = event.target.dataset.userId;
            const userDetailsResponse = await fetch(`/users/${userId}`);
            const userDetails = await userDetailsResponse.json();

            const userDetailsHTML = `
            <div class="user-details">
              <h2>User Details:</h2>
              <p><strong>Name:</strong> ${userDetails.name}</p>
              <p><strong>Email:</strong> ${userDetails.email}</p>
              <p><strong>Role:</strong> ${userDetails.role}</p>
            </div>
          `;

            userDetailsContainer.innerHTML = userDetailsHTML;
            updateUserRoleForm.style.display = "block"; // Show the form
          }
        });

        showReviewsBtn.addEventListener("click", () => {
          const isReviewsVisible = reviewsContainer.style.display !== "none";
          reviewsContainer.style.display = isReviewsVisible ? "none" : "block";
          showReviewsBtn.textContent = isReviewsVisible
            ? "Show Reviews"
            : "Hide Reviews";
        });

        // Handle form submission
        updateUserRoleForm.addEventListener("submit", async (event) => {
          event.preventDefault(); // Prevent default form submission

          const userId = document.querySelector(".user-button.active").dataset
            .userId; // Assuming you have a way to track the active user button
          const role = document.getElementById("role").value;

          try {
            // Send a POST request to the server to update the user's role
            const response = await fetch("/change_role", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ userId, role }),
            });

            if (response.ok) {
              alert("User role updated successfully!");
            } else {
              alert("Failed to update user role.");
            }
          } catch (error) {
            console.error("Error:", error);
            alert("An error occurred while updating user role.");
          }
        });
      });

      userList.addEventListener("click", async (event) => {
        if (event.target.classList.contains("user-button")) {
          // Remove the 'active' class from all user buttons
          const userButtons = document.querySelectorAll(".user-button");
          userButtons.forEach((button) => button.classList.remove("active"));

          // Add the 'active' class to the clicked user button
          event.target.classList.add("active");

          const userId = event.target.dataset.userId;
          const userDetailsResponse = await fetch(`/users/${userId}`);
          const userDetails = await userDetailsResponse.json();

          const userDetailsHTML = `
            <div class="user-details">
              <h2>User Details:</h2>
              <p><strong>Name:</strong> ${userDetails.name}</p>
              <p><strong>Email:</strong> ${userDetails.email}</p>
              <p><strong>Role:</strong> ${userDetails.role}</p>
            </div>
          `;

          userDetailsContainer.innerHTML = userDetailsHTML;
          updateUserRoleForm.style.display = "block"; // Show the form
        }
      });

      const deleteReview = async (reviewId, reviewsContainer) => {
        try {
          // Send a DELETE request to the server to delete the review
          const response = await fetch(`/reviews/${reviewId}`, {
            method: "DELETE",
          });

          if (response.ok) {
            // Remove the deleted review from the DOM
            const reviewItem = document.getElementById(`review_${reviewId}`);
            reviewItem.remove();
            alert("Review deleted successfully!");
          } else {
            alert("Failed to delete the review.");
          }
        } catch (error) {
          console.error("Error:", error);
          alert("Review deleted Successfully.");
          location.reload();
        }
      };

      // Add event listener to the "Delete" buttons
      reviewsContainer.addEventListener("click", async (event) => {
        if (event.target.classList.contains("delete-review-btn")) {
          const reviewId = event.target.dataset.reviewId;
          if (confirm("Are you sure you want to delete this review?")) {
            deleteReview(reviewId, reviewsContainer);
          }
        }
      });
    </script>
  </body>
</html>
