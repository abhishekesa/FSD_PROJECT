import { Caller, Collection, Filter } from '@forestadmin/datasource-toolkit';
import CollectionCustomizationContext from '../../context/collection-context';
import { TCollectionName, TFilter, TPartialSimpleRow, TSchema } from '../../templates';
export declare class CreateOverrideCustomizationContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends CollectionCustomizationContext<S, N> {
    readonly data: TPartialSimpleRow<S, N>[];
    constructor(collection: Collection, caller: Caller, data: TPartialSimpleRow<S, N>[]);
}
export declare class UpdateOverrideCustomizationContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends CollectionCustomizationContext<S, N> {
    readonly filter: TFilter<S, N>;
    readonly patch: TPartialSimpleRow<S, N>;
    constructor(collection: Collection, caller: Caller, filter: Filter, patch: TPartialSimpleRow<S, N>);
}
export declare class DeleteOverrideCustomizationContext<S extends TSchema = TSchema, N extends TCollectionName<S> = TCollectionName<S>> extends CollectionCustomizationContext<S, N> {
    readonly filter: TFilter<S, N>;
    constructor(collection: Collection, caller: Caller, filter: Filter);
}
//# sourceMappingURL=context.d.ts.map