"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
class CreateRelationsCollectionDecorator extends datasource_toolkit_1.CollectionDecorator {
    async create(caller, records) {
        // Step 1: Remove all relations from records, and store them in a map
        // Note: the extractRelations method modifies the records array in place!
        const recordsByRelation = this.extractRelations(records);
        // Step 2: Create the many-to-one relations, and put the foreign keys in the records
        await Promise.all(Object.entries(recordsByRelation)
            .filter(([key]) => this.schema.fields[key].type === 'ManyToOne')
            .map(([key, entries]) => this.createManyToOneRelation(caller, records, key, entries)));
        // Step 3: Create the records
        const recordsWithPk = await this.childCollection.create(caller, records);
        // Step 4: Create the one-to-one relations
        // Note: the createOneToOneRelation method modifies the recordsWithPk array in place!
        await Promise.all(Object.entries(recordsByRelation)
            .filter(([key]) => this.schema.fields[key].type === 'OneToOne')
            .map(([key, entries]) => this.createOneToOneRelation(caller, recordsWithPk, key, entries)));
        return recordsWithPk;
    }
    extractRelations(records) {
        const recordsByRelation = {};
        for (const [index, record] of records.entries()) {
            for (const [key, subRecord] of Object.entries(record)) {
                if (this.schema.fields[key].type !== 'Column') {
                    recordsByRelation[key] ?? (recordsByRelation[key] = []);
                    recordsByRelation[key].push({ subRecord, index });
                    delete record[key];
                }
            }
        }
        return recordsByRelation;
    }
    async createManyToOneRelation(caller, records, key, entries) {
        const schema = this.schema.fields[key];
        const relation = this.dataSource.getCollection(schema.foreignCollection);
        const creations = entries.filter(({ index }) => !records[index][schema.foreignKey]);
        const updates = entries.filter(({ index }) => records[index][schema.foreignKey]);
        // Create the relations when the fk is not present
        if (creations.length) {
            // Not sure which behavior is better (we'll go with the first option for now):
            // - create a new record for each record in the original create request
            // - use object-hash to create a single record for each unique subRecord
            const subRecords = creations.map(({ subRecord }) => subRecord);
            const relatedRecords = await relation.create(caller, subRecords);
            for (const { index } of creations) {
                records[index][schema.foreignKey] = relatedRecords[index][schema.foreignKeyTarget];
            }
        }
        // Update the relations when the fk is present
        await Promise.all(updates.map(async ({ index, subRecord }) => {
            const value = records[index][schema.foreignKey];
            const conditionTree = new datasource_toolkit_1.ConditionTreeLeaf(schema.foreignKeyTarget, 'Equal', value);
            return relation.update(caller, new datasource_toolkit_1.Filter({ conditionTree }), subRecord);
        }));
    }
    async createOneToOneRelation(caller, records, key, entries) {
        const schema = this.schema.fields[key];
        const relation = this.dataSource.getCollection(schema.foreignCollection);
        // Set origin key in the related record
        const subRecords = entries.map(({ index, subRecord }) => ({
            ...subRecord,
            [schema.originKey]: records[index][schema.originKeyTarget],
        }));
        await relation.create(caller, subRecords);
    }
}
exports.default = CreateRelationsCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3dyaXRlL2NyZWF0ZS1yZWxhdGlvbnMvY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdFQVF5QztBQUl6QyxNQUFxQixrQ0FBbUMsU0FBUSx3Q0FBbUI7SUFDeEUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsT0FBcUI7UUFDekQscUVBQXFFO1FBQ3JFLHlFQUF5RTtRQUN6RSxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV6RCxvRkFBb0Y7UUFDcEYsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUNmLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUM7YUFDOUIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLFdBQVcsQ0FBQzthQUMvRCxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQ3hGLENBQUM7UUFFRiw2QkFBNkI7UUFDN0IsTUFBTSxhQUFhLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFekUsMENBQTBDO1FBQzFDLHFGQUFxRjtRQUNyRixNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQzthQUM5QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMs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