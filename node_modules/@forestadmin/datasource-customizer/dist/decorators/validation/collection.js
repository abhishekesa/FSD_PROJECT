"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
class ValidationDecorator extends datasource_toolkit_1.CollectionDecorator {
    constructor() {
        super(...arguments);
        this.validation = {};
    }
    addValidation(name, validation) {
        var _a;
        datasource_toolkit_1.FieldValidator.validate(this, name);
        const field = this.childCollection.schema.fields[name];
        if (field?.type !== 'Column') {
            throw new Error('Cannot add validators on a relation, use the foreign key instead');
        }
        if (field.isReadOnly)
            throw new Error('Cannot add validators on a readonly field');
        (_a = this.validation)[name] ?? (_a[name] = []);
        this.validation[name].push(validation);
        this.markSchemaAsDirty();
    }
    async create(caller, data) {
        for (const record of data)
            this.validate(record, caller.timezone, true);
        return super.create(caller, data);
    }
    async update(caller, filter, patch) {
        this.validate(patch, caller.timezone, false);
        return super.update(caller, filter, patch);
    }
    refineSchema(subSchema) {
        const schema = { ...subSchema, fields: { ...subSchema.fields } };
        for (const [name, rules] of Object.entries(this.validation)) {
            const field = { ...schema.fields[name] };
            field.validation = [...(field.validation ?? []), ...rules];
            schema.fields[name] = field;
        }
        return schema;
    }
    validate(record, timezone, allFields) {
        for (const [name, rules] of Object.entries(this.validation)) {
            if (allFields || record[name] !== undefined) {
                // When setting a field to null, only the "Present" validator is relevant
                const applicableRules = record[name] === null ? rules.filter(r => r.operator === 'Present') : rules;
                for (const validator of applicableRules) {
                    const rawLeaf = { field: name, ...validator };
                    const tree = datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(rawLeaf);
                    if (!tree.match(record, this, timezone)) {
                        const message = `'${name}' failed validation rule:`;
                        const rule = validator.value !== undefined
                            ? `${validator.operator}(${validator.value})`
                            : `${validator.operator}`;
                        throw new datasource_toolkit_1.ValidationError(`${message} '${rule}'`);
                    }
                }
            }
        }
    }
}
exports.default = ValidationDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3ZhbGlkYXRpb24vY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdFQVl5QztBQUl6QyxNQUFxQixtQkFBb0IsU0FBUSx3Q0FBbUI7SUFBcEU7O1FBQ1UsZUFBVSxHQUErQyxFQUFFLENBQUM7SUFrRXRFLENBQUM7SUFoRUMsYUFBYSxDQUFDLElBQVksRUFBRSxVQUEwQjs7UUFDcEQsbUNBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQWlCLENBQUM7UUFFdkUsSUFBSSxLQUFLLEVBQUUsSUFBSSxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7U0FDckY7UUFFRCxJQUFJLEtBQUssQ0FBQyxVQUFVO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO1FBRW5GLE1BQUEsSUFBSSxDQUFDLFVBQVUsRUFBQyxJQUFJLFNBQUosSUFBSSxJQUFNLEVBQUUsRUFBQztRQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBRVEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsSUFBa0I7UUFDdEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJO1lBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4RSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFF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