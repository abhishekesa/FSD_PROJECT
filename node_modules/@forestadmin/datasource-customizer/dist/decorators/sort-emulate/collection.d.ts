import { Caller, CollectionDecorator, CollectionSchema, DataSourceDecorator, PaginatedFilter, PlainSortClause, Projection, RecordData } from '@forestadmin/datasource-toolkit';
export default class SortEmulate extends CollectionDecorator {
    readonly dataSource: DataSourceDecorator<SortEmulate>;
    private readonly sorts;
    private readonly disabledSorts;
    emulateFieldSorting(name: string): void;
    /**
     * Disable sorting on this field. This only prevents the end-user to sort on this field.
     * It will still be possible to sort on this field in the customizations code.
     * @param name name of the field
     * @deprecated this method will be removed soon.
     */
    disableFieldSorting(name: string): void;
    replaceFieldSorting(name: string, equivalentSort: PlainSortClause[]): void;
    private replaceOrEmulateFieldSorting;
    list(caller: Caller, filter: PaginatedFilter, projection: Projection): Promise<RecordData[]>;
    protected refineSchema(childSchema: CollectionSchema): CollectionSchema;
    private sortRecords;
    private rewritePlainSortClause;
    private isEmulated;
}
//# sourceMappingURL=collection.d.ts.map