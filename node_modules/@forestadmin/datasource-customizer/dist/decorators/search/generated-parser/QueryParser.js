"use strict";
// Generated from src/decorators/search/Query.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordContext = exports.ValueContext = exports.NameContext = exports.PropertyMatchingContext = exports.NegatedContext = exports.QuotedContext = exports.QueryTokenContext = exports.AndContext = exports.OrContext = exports.ParenthesizedContext = exports.QueryContext = void 0;
const antlr4_1 = require("antlr4");
class QueryParser extends antlr4_1.Parser {
    get grammarFileName() {
        return 'Query.g4';
    }
    get literalNames() {
        return QueryParser.literalNames;
    }
    get symbolicNames() {
        return QueryParser.symbolicNames;
    }
    get ruleNames() {
        return QueryParser.ruleNames;
    }
    get serializedATN() {
        return QueryParser._serializedATN;
    }
    createFailedPredicateException(predicate, message) {
        return new antlr4_1.FailedPredicateException(this, predicate, message);
    }
    constructor(input) {
        super(input);
        this._interp = new antlr4_1.ParserATNSimulator(this, QueryParser._ATN, QueryParser.DecisionsToDFA, new antlr4_1.PredictionContextCache());
    }
    // @RuleVersion(0)
    query() {
        let localctx = new QueryContext(this, this._ctx, this.state);
        this.enterRule(localctx, 0, QueryParser.RULE_query);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 26;
                this._errHandler.sync(this);
                switch (this._interp.adaptivePredict(this._input, 0, this._ctx)) {
                    case 1:
                        {
                            this.state = 22;
                            this.and();
                        }
                        break;
                    case 2:
                        {
                            this.state = 23;
                            this.or();
                        }
                        break;
                    case 3:
                        {
                            this.state = 24;
                            this.queryToken();
                        }
                        break;
                    case 4:
                        {
                            this.state = 25;
                            this.parenthesized();
                        }
                        break;
                }
                this.state = 28;
                this.match(QueryParser.EOF);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    parenthesized() {
        let localctx = new ParenthesizedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 2, QueryParser.RULE_parenthesized);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 30;
                this.match(QueryParser.PARENS_OPEN);
                this.state = 33;
                this._errHandler.sync(this);
                switch (this._interp.adaptivePredict(this._input, 1, this._ctx)) {
                    case 1:
                        {
                            this.state = 31;
                            this.or();
                        }
                        break;
                    case 2:
                        {
                            this.state = 32;
                            this.and();
                        }
                        break;
                }
                this.state = 35;
                this.match(QueryParser.PARENS_CLOSE);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    or() {
        let localctx = new OrContext(this, this._ctx, this.state);
        this.enterRule(localctx, 4, QueryParser.RULE_or);
        let _la;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 40;
                this._errHandler.sync(this);
                switch (this._interp.adaptivePredict(this._input, 2, this._ctx)) {
                    case 1:
                        {
                            this.state = 37;
                            this.and();
                        }
                        break;
                    case 2:
                        {
                            this.state = 38;
                            this.queryToken();
                        }
                        break;
                    case 3:
                        {
                            this.state = 39;
                            this.parenthesized();
                        }
                        break;
                }
                this.state = 50;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                do {
                    {
                        {
                            this.state = 42;
                            this.match(QueryParser.SEPARATOR);
                            this.state = 43;
                            this.match(QueryParser.OR);
                            this.state = 44;
                            this.match(QueryParser.SEPARATOR);
                            this.state = 48;
                            this._errHandler.sync(this);
                            switch (this._interp.adaptivePredict(this._input, 3, this._ctx)) {
                                case 1:
                                    {
                                        this.state = 45;
                                        this.and();
                                    }
                                    break;
                                case 2:
                                    {
                                        this.state = 46;
                                        this.queryToken();
                                    }
                                    break;
                                case 3:
                                    {
                                        this.state = 47;
                                        this.parenthesized();
                                    }
                                    break;
                            }
                        }
                    }
                    this.state = 52;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                } while (_la === 10);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    and() {
        let localctx = new AndContext(this, this._ctx, this.state);
        this.enterRule(localctx, 6, QueryParser.RULE_and);
        let _la;
        try {
            let _alt;
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 56;
                this._errHandler.sync(this);
                switch (this._input.LA(1)) {
                    case 6:
                    case 7:
                    case 8:
                    case 9:
                        {
                            this.state = 54;
                            this.queryToken();
                        }
                        break;
                    case 2:
                        {
                            this.state = 55;
                            this.parenthesized();
                        }
                        break;
                    default:
                        throw new antlr4_1.NoViableAltException(this);
                }
                this.state = 67;
                this._errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1:
                            {
                                {
                                    this.state = 58;
                                    this.match(QueryParser.SEPARATOR);
                                    this.state = 61;
                                    this._errHandler.sync(this);
                                    _la = this._input.LA(1);
                                    if (_la === 5) {
                                        {
                                            this.state = 59;
                                            this.match(QueryParser.AND);
                                            this.state = 60;
                                            this.match(QueryParser.SEPARATOR);
                                        }
                                    }
                                    this.state = 65;
                                    this._errHandler.sync(this);
                                    switch (this._input.LA(1)) {
                                        case 6:
                                        case 7:
                                        case 8:
                                        case 9:
                                            {
                                                this.state = 63;
                                                this.queryToken();
                                            }
                                            break;
                                        case 2:
                                            {
                                                this.state = 64;
                                                this.parenthesized();
                                            }
                                            break;
                                        default:
                                            throw new antlr4_1.NoViableAltException(this);
                                    }
                                }
                            }
                            break;
                        default:
                            throw new antlr4_1.NoViableAltException(this);
                    }
                    this.state = 69;
                    this._errHandler.sync(this);
                    _alt = this._interp.adaptivePredict(this._input, 8, this._ctx);
                } while (_alt !== 2 && _alt !== antlr4_1.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    queryToken() {
        let localctx = new QueryTokenContext(this, this._ctx, this.state);
        this.enterRule(localctx, 8, QueryParser.RULE_queryToken);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 75;
                this._errHandler.sync(this);
                switch (this._interp.adaptivePredict(this._input, 9, this._ctx)) {
                    case 1:
                        {
                            this.state = 71;
                            this.quoted();
                        }
                        break;
                    case 2:
                        {
                            this.state = 72;
                            this.negated();
                        }
                        break;
                    case 3:
                        {
                            this.state = 73;
                            this.propertyMatching();
                        }
                        break;
                    case 4:
                        {
                            this.state = 74;
                            this.word();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    quoted() {
        let localctx = new QuotedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 10, QueryParser.RULE_quoted);
        let _la;
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 77;
                _la = this._input.LA(1);
                if (!(_la === 6 || _la === 7)) {
                    this._errHandler.recoverInline(this);
                }
                else {
                    this._errHandler.reportMatch(this);
                    this.consume();
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    negated() {
        let localctx = new NegatedContext(this, this._ctx, this.state);
        this.enterRule(localctx, 12, QueryParser.RULE_negated);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 79;
                this.match(QueryParser.NEGATION);
                this.state = 83;
                this._errHandler.sync(this);
                switch (this._interp.adaptivePredict(this._input, 10, this._ctx)) {
                    case 1:
                        {
                            this.state = 80;
                            this.word();
                        }
                        break;
                    case 2:
                        {
                            this.state = 81;
                            this.quoted();
                        }
                        break;
                    case 3:
                        {
                            this.state = 82;
                            this.propertyMatching();
                        }
                        break;
                }
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    propertyMatching() {
        let localctx = new PropertyMatchingContext(this, this._ctx, this.state);
        this.enterRule(localctx, 14, QueryParser.RULE_propertyMatching);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 85;
                this.name();
                this.state = 86;
                this.match(QueryParser.T__0);
                this.state = 87;
                this.value();
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    name() {
        let localctx = new NameContext(this, this._ctx, this.state);
        this.enterRule(localctx, 16, QueryParser.RULE_name);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 89;
                this.match(QueryParser.TOKEN);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    value() {
        let localctx = new ValueContext(this, this._ctx, this.state);
        this.enterRule(localctx, 18, QueryParser.RULE_value);
        try {
            this.state = 93;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
                case 9:
                    this.enterOuterAlt(localctx, 1);
                    {
                        this.state = 91;
                        this.word();
                    }
                    break;
                case 6:
                case 7:
                    this.enterOuterAlt(localctx, 2);
                    {
                        this.state = 92;
                        this.quoted();
                    }
                    break;
                default:
                    throw new antlr4_1.NoViableAltException(this);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    // @RuleVersion(0)
    word() {
        let localctx = new WordContext(this, this._ctx, this.state);
        this.enterRule(localctx, 20, QueryParser.RULE_word);
        try {
            this.enterOuterAlt(localctx, 1);
            {
                this.state = 95;
                this.match(QueryParser.TOKEN);
            }
        }
        catch (re) {
            if (re instanceof antlr4_1.RecognitionException) {
                localctx.exception = re;
                this._errHandler.reportError(this, re);
                this._errHandler.recover(this, re);
            }
            else {
                throw re;
            }
        }
        finally {
            this.exitRule();
        }
        return localctx;
    }
    static get _ATN() {
        if (!QueryParser.__ATN) {
            QueryParser.__ATN = new antlr4_1.ATNDeserializer().deserialize(QueryParser._serializedATN);
        }
        return QueryParser.__ATN;
    }
}
exports.default = QueryParser;
QueryParser.T__0 = 1;
QueryParser.PARENS_OPEN = 2;
QueryParser.PARENS_CLOSE = 3;
QueryParser.OR = 4;
QueryParser.AND = 5;
QueryParser.SINGLE_QUOTED = 6;
QueryParser.DOUBLE_QUOTED = 7;
QueryParser.NEGATION = 8;
QueryParser.TOKEN = 9;
QueryParser.SEPARATOR = 10;
QueryParser.SPACING = 11;
QueryParser.EOF = antlr4_1.Token.EOF;
QueryParser.RULE_query = 0;
QueryParser.RULE_parenthesized = 1;
QueryParser.RULE_or = 2;
QueryParser.RULE_and = 3;
QueryParser.RULE_queryToken = 4;
QueryParser.RULE_quoted = 5;
QueryParser.RULE_negated = 6;
QueryParser.RULE_propertyMatching = 7;
QueryParser.RULE_name = 8;
QueryParser.RULE_value = 9;
QueryParser.RULE_word = 10;
QueryParser.literalNames = [
    null,
    "':'",
    null,
    null,
    "'OR'",
    "'AND'",
    null,
    null,
    "'-'",
];
QueryParser.symbolicNames = [
    null,
    null,
    'PARENS_OPEN',
    'PARENS_CLOSE',
    'OR',
    'AND',
    'SINGLE_QUOTED',
    'DOUBLE_QUOTED',
    'NEGATION',
    'TOKEN',
    'SEPARATOR',
    'SPACING',
];
// tslint:disable:no-trailing-whitespace
QueryParser.ruleNames = [
    'query',
    'parenthesized',
    'or',
    'and',
    'queryToken',
    'quoted',
    'negated',
    'propertyMatching',
    'name',
    'value',
    'word',
];
QueryParser._serializedATN = [
    4, 1, 11, 98, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7,
    6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, 27, 8, 0, 1,
    0, 1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 34, 8, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 3, 2, 41, 8, 2, 1, 2,
    1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 49, 8, 2, 4, 2, 51, 8, 2, 11, 2, 12, 2, 52, 1, 3, 1, 3, 3,
    3, 57, 8, 3, 1, 3, 1, 3, 1, 3, 3, 3, 62, 8, 3, 1, 3, 1, 3, 3, 3, 66, 8, 3, 4, 3, 68, 8, 3, 11,
    3, 12, 3, 69, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 76, 8, 4, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6,
    84, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 3, 9, 94, 8, 9, 1, 10, 1, 10, 1, 10,
    0, 0, 11, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 0, 1, 1, 0, 6, 7, 105, 0, 26, 1, 0, 0, 0, 2,
    30, 1, 0, 0, 0, 4, 40, 1, 0, 0, 0, 6, 56, 1, 0, 0, 0, 8, 75, 1, 0, 0, 0, 10, 77, 1, 0, 0, 0, 12,
    79, 1, 0, 0, 0, 14, 85, 1, 0, 0, 0, 16, 89, 1, 0, 0, 0, 18, 93, 1, 0, 0, 0, 20, 95, 1, 0, 0, 0,
    22, 27, 3, 6, 3, 0, 23, 27, 3, 4, 2, 0, 24, 27, 3, 8, 4, 0, 25, 27, 3, 2, 1, 0, 26, 22, 1, 0, 0,
    0, 26, 23, 1, 0, 0, 0, 26, 24, 1, 0, 0, 0, 26, 25, 1, 0, 0, 0, 27, 28, 1, 0, 0, 0, 28, 29, 5, 0,
    0, 1, 29, 1, 1, 0, 0, 0, 30, 33, 5, 2, 0, 0, 31, 34, 3, 4, 2, 0, 32, 34, 3, 6, 3, 0, 33, 31, 1,
    0, 0, 0, 33, 32, 1, 0, 0, 0, 34, 35, 1, 0, 0, 0, 35, 36, 5, 3, 0, 0, 36, 3, 1, 0, 0, 0, 37, 41,
    3, 6, 3, 0, 38, 41, 3, 8, 4, 0, 39, 41, 3, 2, 1, 0, 40, 37, 1, 0, 0, 0, 40, 38, 1, 0, 0, 0, 40,
    39, 1, 0, 0, 0, 41, 50, 1, 0, 0, 0, 42, 43, 5, 10, 0, 0, 43, 44, 5, 4, 0, 0, 44, 48, 5, 10, 0,
    0, 45, 49, 3, 6, 3, 0, 46, 49, 3, 8, 4, 0, 47, 49, 3, 2, 1, 0, 48, 45, 1, 0, 0, 0, 48, 46, 1, 0,
    0, 0, 48, 47, 1, 0, 0, 0, 49, 51, 1, 0, 0, 0, 50, 42, 1, 0, 0, 0, 51, 52, 1, 0, 0, 0, 52, 50, 1,
    0, 0, 0, 52, 53, 1, 0, 0, 0, 53, 5, 1, 0, 0, 0, 54, 57, 3, 8, 4, 0, 55, 57, 3, 2, 1, 0, 56, 54,
    1, 0, 0, 0, 56, 55, 1, 0, 0, 0, 57, 67, 1, 0, 0, 0, 58, 61, 5, 10, 0, 0, 59, 60, 5, 5, 0, 0, 60,
    62, 5, 10, 0, 0, 61, 59, 1, 0, 0, 0, 61, 62, 1, 0, 0, 0, 62, 65, 1, 0, 0, 0, 63, 66, 3, 8, 4, 0,
    64, 66, 3, 2, 1, 0, 65, 63, 1, 0, 0, 0, 65, 64, 1, 0, 0, 0, 66, 68, 1, 0, 0, 0, 67, 58, 1, 0, 0,
    0, 68, 69, 1, 0, 0, 0, 69, 67, 1, 0, 0, 0, 69, 70, 1, 0, 0, 0, 70, 7, 1, 0, 0, 0, 71, 76, 3, 10,
    5, 0, 72, 76, 3, 12, 6, 0, 73, 76, 3, 14, 7, 0, 74, 76, 3, 20, 10, 0, 75, 71, 1, 0, 0, 0, 75,
    72, 1, 0, 0, 0, 75, 73, 1, 0, 0, 0, 75, 74, 1, 0, 0, 0, 76, 9, 1, 0, 0, 0, 77, 78, 7, 0, 0, 0,
    78, 11, 1, 0, 0, 0, 79, 83, 5, 8, 0, 0, 80, 84, 3, 20, 10, 0, 81, 84, 3, 10, 5, 0, 82, 84, 3,
    14, 7, 0, 83, 80, 1, 0, 0, 0, 83, 81, 1, 0, 0, 0, 83, 82, 1, 0, 0, 0, 84, 13, 1, 0, 0, 0, 85,
    86, 3, 16, 8, 0, 86, 87, 5, 1, 0, 0, 87, 88, 3, 18, 9, 0, 88, 15, 1, 0, 0, 0, 89, 90, 5, 9, 0,
    0, 90, 17, 1, 0, 0, 0, 91, 94, 3, 20, 10, 0, 92, 94, 3, 10, 5, 0, 93, 91, 1, 0, 0, 0, 93, 92, 1,
    0, 0, 0, 94, 19, 1, 0, 0, 0, 95, 96, 5, 9, 0, 0, 96, 21, 1, 0, 0, 0, 12, 26, 33, 40, 48, 52, 56,
    61, 65, 69, 75, 83, 93,
];
QueryParser.DecisionsToDFA = QueryParser._ATN.decisionToState.map((ds, index) => new antlr4_1.DFA(ds, index));
class QueryContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    EOF() {
        return this.getToken(QueryParser.EOF, 0);
    }
    and() {
        return this.getTypedRuleContext(AndContext, 0);
    }
    or() {
        return this.getTypedRuleContext(OrContext, 0);
    }
    queryToken() {
        return this.getTypedRuleContext(QueryTokenContext, 0);
    }
    parenthesized() {
        return this.getTypedRuleContext(ParenthesizedContext, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_query;
    }
    enterRule(listener) {
        if (listener.enterQuery) {
            listener.enterQuery(this);
        }
    }
    exitRule(listener) {
        if (listener.exitQuery) {
            listener.exitQuery(this);
        }
    }
}
exports.QueryContext = QueryContext;
class ParenthesizedContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    PARENS_OPEN() {
        return this.getToken(QueryParser.PARENS_OPEN, 0);
    }
    PARENS_CLOSE() {
        return this.getToken(QueryParser.PARENS_CLOSE, 0);
    }
    or() {
        return this.getTypedRuleContext(OrContext, 0);
    }
    and() {
        return this.getTypedRuleContext(AndContext, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_parenthesized;
    }
    enterRule(listener) {
        if (listener.enterParenthesized) {
            listener.enterParenthesized(this);
        }
    }
    exitRule(listener) {
        if (listener.exitParenthesized) {
            listener.exitParenthesized(this);
        }
    }
}
exports.ParenthesizedContext = ParenthesizedContext;
class OrContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    and_list() {
        return this.getTypedRuleContexts(AndContext);
    }
    and(i) {
        return this.getTypedRuleContext(AndContext, i);
    }
    queryToken_list() {
        return this.getTypedRuleContexts(QueryTokenContext);
    }
    queryToken(i) {
        return this.getTypedRuleContext(QueryTokenContext, i);
    }
    parenthesized_list() {
        return this.getTypedRuleContexts(ParenthesizedContext);
    }
    parenthesized(i) {
        return this.getTypedRuleContext(ParenthesizedContext, i);
    }
    SEPARATOR_list() {
        return this.getTokens(QueryParser.SEPARATOR);
    }
    SEPARATOR(i) {
        return this.getToken(QueryParser.SEPARATOR, i);
    }
    OR_list() {
        return this.getTokens(QueryParser.OR);
    }
    OR(i) {
        return this.getToken(QueryParser.OR, i);
    }
    get ruleIndex() {
        return QueryParser.RULE_or;
    }
    enterRule(listener) {
        if (listener.enterOr) {
            listener.enterOr(this);
        }
    }
    exitRule(listener) {
        if (listener.exitOr) {
            listener.exitOr(this);
        }
    }
}
exports.OrContext = OrContext;
class AndContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    queryToken_list() {
        return this.getTypedRuleContexts(QueryTokenContext);
    }
    queryToken(i) {
        return this.getTypedRuleContext(QueryTokenContext, i);
    }
    parenthesized_list() {
        return this.getTypedRuleContexts(ParenthesizedContext);
    }
    parenthesized(i) {
        return this.getTypedRuleContext(ParenthesizedContext, i);
    }
    SEPARATOR_list() {
        return this.getTokens(QueryParser.SEPARATOR);
    }
    SEPARATOR(i) {
        return this.getToken(QueryParser.SEPARATOR, i);
    }
    AND_list() {
        return this.getTokens(QueryParser.AND);
    }
    AND(i) {
        return this.getToken(QueryParser.AND, i);
    }
    get ruleIndex() {
        return QueryParser.RULE_and;
    }
    enterRule(listener) {
        if (listener.enterAnd) {
            listener.enterAnd(this);
        }
    }
    exitRule(listener) {
        if (listener.exitAnd) {
            listener.exitAnd(this);
        }
    }
}
exports.AndContext = AndContext;
class QueryTokenContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    quoted() {
        return this.getTypedRuleContext(QuotedContext, 0);
    }
    negated() {
        return this.getTypedRuleContext(NegatedContext, 0);
    }
    propertyMatching() {
        return this.getTypedRuleContext(PropertyMatchingContext, 0);
    }
    word() {
        return this.getTypedRuleContext(WordContext, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_queryToken;
    }
    enterRule(listener) {
        if (listener.enterQueryToken) {
            listener.enterQueryToken(this);
        }
    }
    exitRule(listener) {
        if (listener.exitQueryToken) {
            listener.exitQueryToken(this);
        }
    }
}
exports.QueryTokenContext = QueryTokenContext;
class QuotedContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    SINGLE_QUOTED() {
        return this.getToken(QueryParser.SINGLE_QUOTED, 0);
    }
    DOUBLE_QUOTED() {
        return this.getToken(QueryParser.DOUBLE_QUOTED, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_quoted;
    }
    enterRule(listener) {
        if (listener.enterQuoted) {
            listener.enterQuoted(this);
        }
    }
    exitRule(listener) {
        if (listener.exitQuoted) {
            listener.exitQuoted(this);
        }
    }
}
exports.QuotedContext = QuotedContext;
class NegatedContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    NEGATION() {
        return this.getToken(QueryParser.NEGATION, 0);
    }
    word() {
        return this.getTypedRuleContext(WordContext, 0);
    }
    quoted() {
        return this.getTypedRuleContext(QuotedContext, 0);
    }
    propertyMatching() {
        return this.getTypedRuleContext(PropertyMatchingContext, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_negated;
    }
    enterRule(listener) {
        if (listener.enterNegated) {
            listener.enterNegated(this);
        }
    }
    exitRule(listener) {
        if (listener.exitNegated) {
            listener.exitNegated(this);
        }
    }
}
exports.NegatedContext = NegatedContext;
class PropertyMatchingContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    name() {
        return this.getTypedRuleContext(NameContext, 0);
    }
    value() {
        return this.getTypedRuleContext(ValueContext, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_propertyMatching;
    }
    enterRule(listener) {
        if (listener.enterPropertyMatching) {
            listener.enterPropertyMatching(this);
        }
    }
    exitRule(listener) {
        if (listener.exitPropertyMatching) {
            listener.exitPropertyMatching(this);
        }
    }
}
exports.PropertyMatchingContext = PropertyMatchingContext;
class NameContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    TOKEN() {
        return this.getToken(QueryParser.TOKEN, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_name;
    }
    enterRule(listener) {
        if (listener.enterName) {
            listener.enterName(this);
        }
    }
    exitRule(listener) {
        if (listener.exitName) {
            listener.exitName(this);
        }
    }
}
exports.NameContext = NameContext;
class ValueContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    word() {
        return this.getTypedRuleContext(WordContext, 0);
    }
    quoted() {
        return this.getTypedRuleContext(QuotedContext, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_value;
    }
    enterRule(listener) {
        if (listener.enterValue) {
            listener.enterValue(this);
        }
    }
    exitRule(listener) {
        if (listener.exitValue) {
            listener.exitValue(this);
        }
    }
}
exports.ValueContext = ValueContext;
class WordContext extends antlr4_1.ParserRuleContext {
    constructor(parser, parent, invokingState) {
        super(parent, invokingState);
        this.parser = parser;
    }
    TOKEN() {
        return this.getToken(QueryParser.TOKEN, 0);
    }
    get ruleIndex() {
        return QueryParser.RULE_word;
    }
    enterRule(listener) {
        if (listener.enterWord) {
            listener.enterWord(this);
        }
    }
    exitRule(listener) {
        if (listener.exitWord) {
            listener.exitWord(this);
        }
    }
}
exports.WordContext = WordContext;
//# sourceMappingURL=data:application/json;base64,