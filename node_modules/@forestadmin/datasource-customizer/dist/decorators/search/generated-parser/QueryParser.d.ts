import { ATN, DFA, FailedPredicateException, Parser, ParserRuleContext, TerminalNode, TokenStream } from 'antlr4';
import QueryListener from './QueryListener.js';
export default class QueryParser extends Parser {
    static readonly T__0 = 1;
    static readonly PARENS_OPEN = 2;
    static readonly PARENS_CLOSE = 3;
    static readonly OR = 4;
    static readonly AND = 5;
    static readonly SINGLE_QUOTED = 6;
    static readonly DOUBLE_QUOTED = 7;
    static readonly NEGATION = 8;
    static readonly TOKEN = 9;
    static readonly SEPARATOR = 10;
    static readonly SPACING = 11;
    static readonly EOF: number;
    static readonly RULE_query = 0;
    static readonly RULE_parenthesized = 1;
    static readonly RULE_or = 2;
    static readonly RULE_and = 3;
    static readonly RULE_queryToken = 4;
    static readonly RULE_quoted = 5;
    static readonly RULE_negated = 6;
    static readonly RULE_propertyMatching = 7;
    static readonly RULE_name = 8;
    static readonly RULE_value = 9;
    static readonly RULE_word = 10;
    static readonly literalNames: (string | null)[];
    static readonly symbolicNames: (string | null)[];
    static readonly ruleNames: string[];
    get grammarFileName(): string;
    get literalNames(): (string | null)[];
    get symbolicNames(): (string | null)[];
    get ruleNames(): string[];
    get serializedATN(): number[];
    protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException;
    constructor(input: TokenStream);
    query(): QueryContext;
    parenthesized(): ParenthesizedContext;
    or(): OrContext;
    and(): AndContext;
    queryToken(): QueryTokenContext;
    quoted(): QuotedContext;
    negated(): NegatedContext;
    propertyMatching(): PropertyMatchingContext;
    name(): NameContext;
    value(): ValueContext;
    word(): WordContext;
    static readonly _serializedATN: number[];
    private static __ATN;
    static get _ATN(): ATN;
    static DecisionsToDFA: DFA[];
}
export declare class QueryContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    EOF(): TerminalNode;
    and(): AndContext;
    or(): OrContext;
    queryToken(): QueryTokenContext;
    parenthesized(): ParenthesizedContext;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class ParenthesizedContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    PARENS_OPEN(): TerminalNode;
    PARENS_CLOSE(): TerminalNode;
    or(): OrContext;
    and(): AndContext;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class OrContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    and_list(): AndContext[];
    and(i: number): AndContext;
    queryToken_list(): QueryTokenContext[];
    queryToken(i: number): QueryTokenContext;
    parenthesized_list(): ParenthesizedContext[];
    parenthesized(i: number): ParenthesizedContext;
    SEPARATOR_list(): TerminalNode[];
    SEPARATOR(i: number): TerminalNode;
    OR_list(): TerminalNode[];
    OR(i: number): TerminalNode;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class AndContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    queryToken_list(): QueryTokenContext[];
    queryToken(i: number): QueryTokenContext;
    parenthesized_list(): ParenthesizedContext[];
    parenthesized(i: number): ParenthesizedContext;
    SEPARATOR_list(): TerminalNode[];
    SEPARATOR(i: number): TerminalNode;
    AND_list(): TerminalNode[];
    AND(i: number): TerminalNode;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class QueryTokenContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    quoted(): QuotedContext;
    negated(): NegatedContext;
    propertyMatching(): PropertyMatchingContext;
    word(): WordContext;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class QuotedContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    SINGLE_QUOTED(): TerminalNode;
    DOUBLE_QUOTED(): TerminalNode;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class NegatedContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    NEGATION(): TerminalNode;
    word(): WordContext;
    quoted(): QuotedContext;
    propertyMatching(): PropertyMatchingContext;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class PropertyMatchingContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    name(): NameContext;
    value(): ValueContext;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class NameContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    TOKEN(): TerminalNode;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class ValueContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    word(): WordContext;
    quoted(): QuotedContext;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
export declare class WordContext extends ParserRuleContext {
    constructor(parser?: QueryParser, parent?: ParserRuleContext, invokingState?: number);
    TOKEN(): TerminalNode;
    get ruleIndex(): number;
    enterRule(listener: QueryListener): void;
    exitRule(listener: QueryListener): void;
}
//# sourceMappingURL=QueryParser.d.ts.map