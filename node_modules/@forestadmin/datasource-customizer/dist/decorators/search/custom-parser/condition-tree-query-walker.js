"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const index_1 = __importDefault(require("../filter-builder/index"));
const QueryListener_1 = __importDefault(require("../generated-parser/QueryListener"));
const normalize_name_1 = __importDefault(require("../normalize-name"));
class ConditionTreeQueryWalker extends QueryListener_1.default {
    get conditionTree() {
        if (this.parentStack.length !== 1 && this.parentStack[0].length !== 1) {
            throw new Error('Invalid condition tree');
        }
        return this.parentStack[0][0];
    }
    constructor(caller, fields) {
        super();
        this.caller = caller;
        this.fields = fields;
        this.parentStack = [];
        this.currentField = null;
        this.isNegated = false;
        this.enterQuery = () => {
            this.parentStack.push([]);
        };
        this.exitQuery = () => {
            const rules = this.parentStack.pop();
            if (!rules) {
                throw new Error('Empty query');
            }
            if (rules.length === 1) {
                this.parentStack.push(rules);
            }
            else {
                this.parentStack.push([datasource_toolkit_1.ConditionTreeFactory.intersect(...rules)]);
            }
        };
        this.exitQuoted = (ctx) => {
            const current = this.parentStack[this.parentStack.length - 1];
            current.push(this.buildDefaultCondition(ctx.getText().slice(1, -1), this.isNegated));
        };
        this.enterNegated = () => {
            this.parentStack.push([]);
            this.isNegated = true;
        };
        this.exitNegated = (ctx) => {
            const text = ctx.getText();
            const rules = this.parentStack.pop();
            if (!rules)
                return;
            let result;
            if (!Number.isNaN(Number(text)) && rules.length === 1) {
                result = this.buildDefaultCondition(text, false);
            }
            else {
                result = datasource_toolkit_1.ConditionTreeFactory.intersect(...rules.filter(Boolean));
            }
            const parentRules = this.parentStack[this.parentStack.length - 1];
            if (parentRules) {
                parentRules.push(result);
            }
            else {
                // We should at least have an array for the root query
                throw new Error('Empty stack');
            }
            this.isNegated = false;
        };
        this.exitWord = (ctx) => {
            const current = this.parentStack[this.parentStack.length - 1];
            current.push(this.buildDefaultCondition(ctx.getText(), this.isNegated));
        };
        this.enterPropertyMatching = (ctx) => {
            this.currentField = ctx.getChild(0).getText().replace(/\./g, ':');
        };
        this.exitPropertyMatching = () => {
            this.currentField = null;
        };
        this.enterOr = () => {
            this.parentStack.push([]);
        };
        this.exitOr = () => {
            const rules = this.parentStack.pop();
            if (!rules.length)
                return;
            const parentRules = this.parentStack[this.parentStack.length - 1];
            parentRules.push(datasource_toolkit_1.ConditionTreeFactory.union(...rules));
        };
        this.enterAnd = () => {
            this.parentStack.push([]);
        };
        this.exitAnd = () => {
            const rules = this.parentStack.pop();
            if (!rules.length)
                return;
            const parentRules = this.parentStack[this.parentStack.length - 1];
            parentRules.push(datasource_toolkit_1.ConditionTreeFactory.intersect(...rules));
        };
    }
    generateDefaultFilter(searchQuery) {
        return this.buildDefaultCondition(searchQuery, this.isNegated);
    }
    buildDefaultCondition(searchString, isNegated) {
        const targetedFields = this.currentField &&
            this.fields.filter(([field]) => (0, normalize_name_1.default)(field) === (0, normalize_name_1.default)(this.currentField));
        let rules = [];
        if (!targetedFields?.length) {
            rules = this.fields.map(([field, schema]) => (0, index_1.default)(this.caller, field, schema, 
            // If targetFields is empty, it means that the query is not targeting a specific field
            // OR that the field is not found in the schema. If it's the case, we are re-constructing
            // the original query by adding the field name in front of the search string.
            this.currentField ? `${this.currentField}:${searchString}` : searchString, isNegated));
        }
        else {
            rules = targetedFields.map(([field, schema]) => (0, index_1.default)(this.caller, field, schema, searchString, isNegated));
        }
        if (!rules.some(Boolean))
            return null;
        return isNegated
            ? datasource_toolkit_1.ConditionTreeFactory.intersect(...rules)
            : datasource_toolkit_1.ConditionTreeFactory.union(...rules);
    }
}
exports.default = ConditionTreeQueryWalker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uLXRyZWUtcXVlcnktd2Fsa2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2RlY29yYXRvcnMvc2VhcmNoL2N1c3RvbS1wYXJzZXIvY29uZGl0aW9uLXRyZWUtcXVlcnktd2Fsa2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBS3lDO0FBRXpDLG9FQUF1RDtBQUN2RCxzRkFBOEQ7QUFPOUQsdUVBQThDO0FBRTlDLE1BQXFCLHdCQUF5QixTQUFRLHVCQUFhO0lBS2pFLElBQUksYUFBYTtRQUNmLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyRSxNQUFNLElBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDM0M7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFlBQTZCLE1BQWMsRUFBbUIsTUFBZ0M7UUFDNUYsS0FBSyxFQUFFLENBQUM7UUFEbUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFtQixXQUFNLEdBQU4sTUFBTSxDQUEwQjtRQVp0RixnQkFBVyxHQUFzQixFQUFFLENBQUM7UUFDcEMsaUJBQVksR0FBVyxJQUFJLENBQUM7UUFDNUIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQWtCakIsZUFBVSxHQUFHLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUM7UUFFTyxjQUFTLEdBQUcsR0FBRyxFQUFFO1lBQ3hCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7WUFFckMsSUFBSSxDQUFDLEtBQUssRUFBRTtnQkFD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