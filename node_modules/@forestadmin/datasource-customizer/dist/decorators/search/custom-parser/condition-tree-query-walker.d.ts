import { Caller, ColumnSchema, ConditionTree } from '@forestadmin/datasource-toolkit';
import QueryListener from '../generated-parser/QueryListener';
import { NegatedContext, PropertyMatchingContext, QuotedContext, WordContext } from '../generated-parser/QueryParser';
export default class ConditionTreeQueryWalker extends QueryListener {
    private readonly caller;
    private readonly fields;
    private parentStack;
    private currentField;
    private isNegated;
    get conditionTree(): ConditionTree;
    constructor(caller: Caller, fields: [string, ColumnSchema][]);
    generateDefaultFilter(searchQuery: string): ConditionTree;
    enterQuery: () => void;
    exitQuery: () => void;
    exitQuoted: (ctx: QuotedContext) => void;
    enterNegated: () => void;
    exitNegated: (ctx: NegatedContext) => void;
    exitWord: (ctx: WordContext) => void;
    enterPropertyMatching: (ctx: PropertyMatchingContext) => void;
    exitPropertyMatching: () => void;
    enterOr: () => void;
    exitOr: () => void;
    enterAnd: () => void;
    exitAnd: () => void;
    private buildDefaultCondition;
}
//# sourceMappingURL=condition-tree-query-walker.d.ts.map