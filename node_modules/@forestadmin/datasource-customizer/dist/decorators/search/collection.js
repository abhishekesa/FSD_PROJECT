"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const collection_search_context_1 = __importDefault(require("./collection-search-context"));
const normalize_name_1 = __importDefault(require("./normalize-name"));
const parse_query_1 = require("./parse-query");
class SearchCollectionDecorator extends datasource_toolkit_1.CollectionDecorator {
    constructor() {
        super(...arguments);
        this.replacer = null;
    }
    replaceSearch(replacer) {
        this.replacer = replacer;
    }
    refineSchema(subSchema) {
        return { ...subSchema, searchable: true };
    }
    async refineFilter(caller, filter) {
        // Search string is not significant
        if (!filter?.search?.trim().length) {
            return filter?.override({ search: null });
        }
        // Implement search ourselves
        if (this.replacer || !this.childCollection.schema.searchable) {
            const ctx = new collection_search_context_1.default(this, caller, this.generatePlainSearchFilter.bind(this, caller));
            let tree;
            if (this.replacer) {
                const plainTree = await this.replacer(filter.search, filter.searchExtended, ctx);
                tree = datasource_toolkit_1.ConditionTreeFactory.fromPlainObject(plainTree);
            }
            else {
                tree = this.generateSearchFilter(caller, filter.search, {
                    extended: filter.searchExtended,
                });
            }
            // Note that if no fields are searchable with the provided searchString, the conditions
            // array might be empty, which will create a condition returning zero records
            // (this is the desired behavior).
            return filter.override({
                conditionTree: datasource_toolkit_1.ConditionTreeFactory.intersect(filter.conditionTree, tree),
                search: null,
            });
        }
        // Let subcollection deal with the search
        return filter;
    }
    generateSearchFilter(caller, searchText, options) {
        const parsedQuery = (0, parse_query_1.parseQuery)(searchText);
        const specifiedFields = options?.onlyFields ? [] : (0, parse_query_1.extractSpecifiedFields)(parsedQuery);
        const defaultFields = options?.onlyFields
            ? []
            : this.getFields(this.childCollection, Boolean(options?.extended));
        const searchableFields = new Map([
            ...defaultFields,
            ...[...specifiedFields, ...(options?.onlyFields ?? []), ...(options?.includeFields ?? [])]
                .map(name => this.lenientGetSchema(name))
                .filter(Boolean)
                .map(schema => [schema.field, schema.schema]),
        ]
            .filter(Boolean)
            .filter(([field]) => !options?.excludeFields?.includes(field)));
        const conditionTree = (0, parse_query_1.generateConditionTree)(caller, parsedQuery, [...searchableFields]);
        if (!conditionTree && searchText.trim().length) {
            return datasource_toolkit_1.ConditionTreeFactory.MatchNone;
        }
        return conditionTree;
    }
    generatePlainSearchFilter(caller, searchText, options) {
        const conditionTree = this.generateSearchFilter(caller, searchText, options);
        return conditionTree?.toPlainObject();
    }
    getFields(collection, extended) {
        const fields = [];
        for (const [name, field] of Object.entries(collection.schema.fields)) {
            if (field.type === 'Column')
                fields.push([name, field]);
            if (extended && (field.type === 'ManyToOne' || field.type === 'OneToOne')) {
                const related = collection.dataSource.getCollection(field.foreignCollection);
                for (const [subName, subField] of Object.entries(related.schema.fields)) {
                    if (subField.type === 'Column')
                        fields.push([`${name}:${subName}`, subField]);
                }
            }
        }
        return fields;
    }
    lenientGetSchema(path) {
        const [prefix, suffix] = path.split(/:(.*)/);
        const fuzzyPrefix = (0, normalize_name_1.default)(prefix);
        for (const [field, schema] of Object.entries(this.schema.fields)) {
            const fuzzyFieldName = (0, normalize_name_1.default)(field);
            if (fuzzyPrefix === fuzzyFieldName) {
                if (!suffix && schema.type === 'Column') {
                    return { field, schema };
                }
                if (suffix &&
                    (schema.type === 'OneToMany' || schema.type === 'ManyToOne' || schema.type === 'OneToOne')) {
                    const related = this.dataSource.getCollection(schema.foreignCollection);
                    const fuzzy = related.lenientGetSchema(suffix);
                    if (fuzzy)
                        return { field: `${field}:${fuzzy.field}`, schema: fuzzy.schema };
                }
            }
        }
        return null;
    }
}
exports.default = SearchCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NlYXJjaC9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBV3lDO0FBRXpDLDRGQUFxRjtBQUNyRixzRUFBNkM7QUFDN0MsK0NBQTBGO0FBRzFGLE1BQXFCLHlCQUEwQixTQUFRLHdDQUFtQjtJQUExRTs7UUFFRSxhQUFRLEdBQXFCLElBQUksQ0FBQztJQXVJcEMsQ0FBQztJQXJJQyxhQUFhLENBQUMsUUFBMEI7UUFDdEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVRLFlBQVksQ0FBQyxTQUEyQjtRQUMvQyxPQUFPLEVBQUUsR0FBRyxTQUFTLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzVDLENBQUM7SUFFUSxLQUFLLENBQUMsWUFBWSxDQUFDLE1BQWMsRUFBRSxNQUF3QjtRQUNsRSxtQ0FBbUM7UUFDbkMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFO1lBQ2xDLE9BQU8sTUFBTSxFQUFFLFFBQVEsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsNkJBQTZCO1FBQzdCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUM1RCxNQUFNLEdBQUcsR0FBRyxJQUFJLG1DQUF1QixDQUNyQyxJQUFJLEVBQ0osTUFBTSxFQUNOLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUNsRCxDQUFDO1lBQ0YsSUFBSSxJQUFtQixDQUFDO1lBRXhCLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsTUFBTSxTQUFTLEdBQUcsTUFBTSxJ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