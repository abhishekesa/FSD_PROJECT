"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-continue */
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const luxon_1 = require("luxon");
const build_default_condition_1 = __importDefault(require("./utils/build-default-condition"));
function isYear(str) {
    return (/^\d{4}$/.test(str) && Number(str) >= 1800 && Number(str) <= new Date().getFullYear() + 100);
}
function isYearMonth(str) {
    return /^(\d{4})-(\d{1,2})$/.test(str) && !Number.isNaN(Date.parse(`${str}-01`));
}
function isPlainDate(str) {
    return /^\d{4}-\d{2}-\d{2}$/.test(str) && !Number.isNaN(Date.parse(str));
}
function isValidDate(str) {
    return isYear(str) || isYearMonth(str) || isPlainDate(str);
}
function getPeriodStart(string) {
    if (isYear(string))
        return `${string}-01-01`;
    if (isYearMonth(string))
        return `${string}-01`;
    return string;
}
function pad(month) {
    if (month < 10) {
        return `0${month}`;
    }
    return `${month}`;
}
function getAfterPeriodEnd(string) {
    if (isYear(string))
        return `${Number(string) + 1}-01-01`;
    if (isYearMonth(string)) {
        const [year, month] = string.split('-').map(Number);
        const endDate = new Date(year, month, 1);
        return `${endDate.getFullYear()}-${pad(endDate.getMonth() + 1)}-01`;
    }
    const date = new Date(string);
    date.setDate(date.getDate() + 1);
    return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;
}
function getTranslatedDateInTimezone(value, opts) {
    if (opts.columnType !== 'Date')
        return value;
    return luxon_1.DateTime.fromISO(value, { zone: opts.timezone }).toISO();
}
const supportedOperators = [
    [
        '>',
        [
            ['After', getAfterPeriodEnd],
            ['Equal', getAfterPeriodEnd],
        ],
        [
            ['Before', getPeriodStart],
            ['Equal', getPeriodStart],
            ['Missing', () => undefined],
        ],
    ],
    [
        '>=',
        [
            ['After', getPeriodStart],
            ['Equal', getPeriodStart],
        ],
        [
            ['Before', getPeriodStart],
            ['Missing', () => undefined],
        ],
    ],
    [
        '≥',
        [
            ['After', getPeriodStart],
            ['Equal', getPeriodStart],
        ],
        [
            ['Before', getPeriodStart],
            ['Missing', () => undefined],
        ],
    ],
    [
        '<',
        [['Before', getPeriodStart]],
        [
            ['After', getPeriodStart],
            ['Equal', getPeriodStart],
            ['Missing', () => undefined],
        ],
    ],
    [
        '<=',
        [['Before', getAfterPeriodEnd]],
        [
            ['After', getAfterPeriodEnd],
            ['Equal', getAfterPeriodEnd],
            ['Missing', () => undefined],
        ],
    ],
    [
        '≤',
        [['Before', getAfterPeriodEnd]],
        [
            ['After', getAfterPeriodEnd],
            ['Equal', getAfterPeriodEnd],
            ['Missing', () => undefined],
        ],
    ],
];
function buildDateFieldFilter({ field, filterOperators, searchString, isNegated, columnType, timezone, }) {
    if (isValidDate(searchString)) {
        const start = getTranslatedDateInTimezone(getPeriodStart(searchString), {
            columnType,
            timezone,
        });
        const afterEnd = getTranslatedDateInTimezone(getAfterPeriodEnd(searchString), {
            columnType,
            timezone,
        });
        if (!isNegated &&
            filterOperators.has('Equal') &&
            filterOperators.has('Before') &&
            filterOperators.has('After')) {
            return datasource_toolkit_1.ConditionTreeFactory.intersect(datasource_toolkit_1.ConditionTreeFactory.union(new datasource_toolkit_1.ConditionTreeLeaf(field, 'Equal', start), new datasource_toolkit_1.ConditionTreeLeaf(field, 'After', start)), new datasource_toolkit_1.ConditionTreeLeaf(field, 'Before', afterEnd));
        }
        if (isNegated &&
            filterOperators.has('Before') &&
            filterOperators.has('After') &&
            filterOperators.has('Equal')) {
            if (filterOperators.has('Missing')) {
                return datasource_toolkit_1.ConditionTreeFactory.union(new datasource_toolkit_1.ConditionTreeLeaf(field, 'Before', start), new datasource_toolkit_1.ConditionTreeLeaf(field, 'After', afterEnd), new datasource_toolkit_1.ConditionTreeLeaf(field, 'Equal', afterEnd), new datasource_toolkit_1.ConditionTreeLeaf(field, 'Missing'));
            }
            return datasource_toolkit_1.ConditionTreeFactory.union(new datasource_toolkit_1.ConditionTreeLeaf(field, 'Before', start), new datasource_toolkit_1.ConditionTreeLeaf(field, 'After', afterEnd), new datasource_toolkit_1.ConditionTreeLeaf(field, 'Equal', afterEnd));
        }
        return (0, build_default_condition_1.default)(isNegated);
    }
    for (const [operatorPrefix, positiveOperations, negativeOperations] of supportedOperators) {
        if (!searchString.startsWith(operatorPrefix))
            continue;
        if (!isValidDate(searchString.slice(operatorPrefix.length)))
            continue;
        const value = searchString.slice(operatorPrefix.length);
        if (!isValidDate(value))
            continue;
        const operations = isNegated ? negativeOperations : positiveOperations;
        // If Missing is not supported, we try to build a condition tree anyway
        if (!operations
            .filter(op => op[0] !== 'Missing')
            .every(operation => filterOperators.has(operation[0]))) {
            continue;
        }
        return datasource_toolkit_1.ConditionTreeFactory.union(...operations
            .filter(op => filterOperators.has(op[0]))
            .map(([operator, getDate]) => new datasource_toolkit_1.ConditionTreeLeaf(field, operator, getTranslatedDateInTimezone(getDate(value), { timezone, columnType }))));
    }
    return (0, build_default_condition_1.default)(isNegated);
}
exports.default = buildDateFieldFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtZGF0ZS1maWVsZC1maWx0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGVjb3JhdG9ycy9zZWFyY2gvZmlsdGVyLWJ1aWxkZXIvYnVpbGQtZGF0ZS1maWVsZC1maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnQ0FBZ0M7QUFDaEMsd0VBTXlDO0FBQ3pDLGlDQUFpQztBQUVqQyw4RkFBb0U7QUFFcEUsU0FBUyxNQUFNLENBQUMsR0FBVztJQUN6QixPQUFPLENBQ0wsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxHQUFHLEdBQUcsQ0FDNUYsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxHQUFXO0lBQzlCLE9BQU8scUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ25GLENBQUM7QUFFRCxTQUFTLFdBQVcsQ0FBQyxHQUFXO0lBQzlCLE9BQU8scUJBQXFCLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0UsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLEdBQVc7SUFDOUIsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBRUQsU0FBUyxjQUFjLENBQUMsTUFBYztJQUNwQyxJQUFJLE1B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