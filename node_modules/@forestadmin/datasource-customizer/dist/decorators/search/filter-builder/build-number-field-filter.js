"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-continue */
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const build_default_condition_1 = __importDefault(require("./utils/build-default-condition"));
const supportedOperators = [
    ['', ['Equal'], ['NotEqual', 'Missing']],
    ['=', ['Equal'], ['NotEqual', 'Missing']],
    ['!=', ['NotEqual'], ['Equal', 'Missing']],
    ['<>', ['NotEqual'], ['Equal', 'Missing']],
    ['>', ['GreaterThan'], ['LessThan', 'Equal', 'Missing']],
    ['>=', ['GreaterThan', 'Equal'], ['LessThan', 'Missing']],
    ['≥', ['GreaterThan', 'Equal'], ['LessThan', 'Missing']],
    ['<', ['LessThan'], ['GreaterThan', 'Equal', 'Missing']],
    ['<=', ['LessThan', 'Equal'], ['GreaterThan', 'Missing']],
    ['≤', ['LessThan', 'Equal'], ['GreaterThan', 'Missing']],
];
function buildNumberFieldFilter(field, filterOperators, searchString, isNegated) {
    for (const [operatorPrefix, positiveOperators, negativeOperators] of supportedOperators) {
        if (operatorPrefix && !searchString.startsWith(operatorPrefix))
            continue;
        if (Number.isNaN(Number(searchString.slice(operatorPrefix.length))))
            continue;
        const value = Number(searchString.slice(operatorPrefix.length));
        const operators = isNegated ? negativeOperators : positiveOperators;
        // If Missing is not supported, we try to build a condition tree anyway
        if (!operators.filter(op => op !== 'Missing').every(operator => filterOperators.has(operator))) {
            continue;
        }
        return datasource_toolkit_1.ConditionTreeFactory.union(...operators
            .filter(operator => filterOperators.has(operator))
            .map(operator => new datasource_toolkit_1.ConditionTreeLeaf(field, operator, operator !== 'Missing' ? value : undefined)));
    }
    return (0, build_default_condition_1.default)(isNegated);
}
exports.default = buildNumberFieldFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtbnVtYmVyLWZpZWxkLWZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NlYXJjaC9maWx0ZXItYnVpbGRlci9idWlsZC1udW1iZXItZmllbGQtZmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsZ0NBQWdDO0FBQ2hDLHdFQUt5QztBQUV6Qyw4RkFBb0U7QUFFcEUsTUFBTSxrQkFBa0IsR0FBdUM7SUFDN0QsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4QyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxQyxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RCxDQUFDLElBQUksRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN6RCxDQUFDLEdBQUcsRUFBRSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RCxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RCxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN6RCxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsQ0FBQztDQUN6RCxDQUFDO0FBRUYsU0FBd0Isc0JBQXNCLENBQzVDLEtBQWEsRUFDYixlQUE4QixFQUM5QixZQUFvQixFQUNwQixTQUFrQjtJQUVsQixLQUFLLE1BQU0sQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxrQkFBa0IsRUFBRTtRQUN2RixJQUFJLGNBQWMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO1lBQUUsU0FBUztRQUN6RSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFBRSxTQUFTO1FBRTlFLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDO1FBRXBFLHVFQUF1RTtRQUN2RSxJQUNFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQzFGO1lBQ0EsU0FBUztTQUNWO1FBRUQsT0FBTyx5Q0FBb0IsQ0FBQyxLQUFLLENBQy9CLEdBQUcsU0FBUzthQUNULE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDakQsR0FBRyxDQUNGLFFBQVEsQ0FBQyxFQUFFLENBQ1QsSUFBSSxzQ0FBaUIsQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQ3JGLENBQ0osQ0FBQztLQUNIO0lBRUQsT0FBTyxJQUFBLGlDQUFxQixFQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUEvQkQseUNBK0JDIn0=