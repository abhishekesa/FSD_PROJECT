"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const build_boolean_field_filter_1 = __importDefault(require("./build-boolean-field-filter"));
const build_date_field_filter_1 = __importDefault(require("./build-date-field-filter"));
const build_enum_array_field_filter_1 = __importDefault(require("./build-enum-array-field-filter"));
const build_enum_field_filter_1 = __importDefault(require("./build-enum-field-filter"));
const build_number_array_field_filter_1 = __importDefault(require("./build-number-array-field-filter"));
const build_number_field_filter_1 = __importDefault(require("./build-number-field-filter"));
const build_string_array_field_filter_1 = __importDefault(require("./build-string-array-field-filter"));
const build_string_field_filter_1 = __importDefault(require("./build-string-field-filter"));
const build_uuid_field_filter_1 = __importDefault(require("./build-uuid-field-filter"));
function generateDefaultCondition(isNegated) {
    return isNegated ? datasource_toolkit_1.ConditionTreeFactory.MatchAll : datasource_toolkit_1.ConditionTreeFactory.MatchNone;
}
function isArrayOf(columnType, testedType) {
    return Array.isArray(columnType) && columnType[0] === testedType;
}
function buildFieldFilter(caller, field, schema, searchString, isNegated) {
    const { columnType, filterOperators } = schema;
    if (searchString === 'NULL') {
        if (!isNegated && filterOperators?.has('Missing')) {
            return new datasource_toolkit_1.ConditionTreeLeaf(field, 'Missing');
        }
        if (isNegated && filterOperators?.has('Present')) {
            return new datasource_toolkit_1.ConditionTreeLeaf(field, 'Present');
        }
        return generateDefaultCondition(isNegated);
    }
    switch (true) {
        case columnType === 'Number':
            return (0, build_number_field_filter_1.default)(field, filterOperators, searchString, isNegated);
        case isArrayOf(columnType, 'Number'):
            return (0, build_number_array_field_filter_1.default)(field, filterOperators, searchString, isNegated);
        case columnType === 'Enum':
            return (0, build_enum_field_filter_1.default)(field, schema, searchString, isNegated);
        case isArrayOf(columnType, 'Enum'):
            return (0, build_enum_array_field_filter_1.default)(field, schema, searchString, isNegated);
        case columnType === 'String':
            return (0, build_string_field_filter_1.default)(field, filterOperators, searchString, isNegated);
        case isArrayOf(columnType, 'String'):
            return (0, build_string_array_field_filter_1.default)(field, filterOperators, searchString, isNegated);
        case columnType === 'Boolean':
            return (0, build_boolean_field_filter_1.default)(field, filterOperators, searchString, isNegated);
        case columnType === 'Uuid':
            return (0, build_uuid_field_filter_1.default)(field, filterOperators, searchString, isNegated);
        case columnType === 'Date':
        case columnType === 'Dateonly':
            return (0, build_date_field_filter_1.default)({
                field,
                filterOperators,
                searchString,
                isNegated,
                columnType,
                timezone: caller.timezone,
            });
        default:
            return generateDefaultCondition(isNegated);
    }
}
exports.default = buildFieldFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGVjb3JhdG9ycy9zZWFyY2gvZmlsdGVyLWJ1aWxkZXIvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFReUM7QUFFekMsOEZBQW1FO0FBQ25FLHdGQUE2RDtBQUM3RCxvR0FBd0U7QUFDeEUsd0ZBQTZEO0FBQzdELHdHQUE0RTtBQUM1RSw0RkFBaUU7QUFDakUsd0dBQTRFO0FBQzVFLDRGQUFpRTtBQUNqRSx3RkFBNkQ7QUFFN0QsU0FBUyx3QkFBd0IsQ0FBQyxTQUFrQjtJQUNsRCxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMseUNBQW9CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyx5Q0FBb0IsQ0FBQyxTQUFTLENBQUM7QUFDcEYsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLFVBQXNCLEVBQUUsVUFBMEI7SUFDbkUsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUM7QUFDbkUsQ0FBQztBQUVELFNBQXdCLGdCQUFnQixDQUN0QyxNQUFjLEVBQ2QsS0FBYSxFQUNiLE1BQW9CLEVBQ3BCLFlBQW9CLEVBQ3BCLFNBQWtCO0lBRWxCLE1BQU0sRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBRS9DLElBQUksWUFBWSxLQUFLLE1BQU0sRUFBRTtRQUMzQixJQUFJLENBQUMsU0FBUyxJQUFJLGVBQWUsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDakQsT0FBTyxJQUFJLHNDQUFpQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNoRDtRQUVELElBQUksU0FBUyxJQUFJLGVBQWUsRUFBRSxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEQsT0FBTyxJQUFJLHNDQUFpQixDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNoRDtRQUVELE9BQU8sd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDNUM7SUFFRCxRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssVUFBVSxLQUFLLFFBQVE7WUFDMUIsT0FBTyxJQUFBLG1DQUFzQixFQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pGLEtBQUssU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7WUFDbEMsT0FBTyxJQUFBLHlDQUEyQixFQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3RGLEtBQUssVUFBVSxLQUFLLE1BQU07WUFDeEIsT0FBTyxJQUFBLGlDQUFvQixFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3RFLEtBQUssU0FBUyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUM7WUFDaEMsT0FBTyxJQUFBLHVDQUF5QixFQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQzNFLEtBQUssVUFBVSxLQUFLLFFBQVE7WUFDMUIsT0FBTyxJQUFBLG1DQUFzQixFQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2pGLEtBQUssU0FBUyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUM7WUFDbEMsT0FBTyxJQUFBLHlDQUEyQixFQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3RGLEtBQUssVUFBVSxLQUFLLFNBQVM7WUFDM0IsT0FBTyxJQUFBLG9DQUF1QixFQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ2xGLEtBQUssVUFBVSxLQUFLLE1BQU07WUFDeEIsT0FBTyxJQUFBLGlDQUFvQixFQUFDLEtBQUssRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQy9FLEtBQUssVUFBVSxLQUFLLE1BQU0sQ0FBQztRQUMzQixLQUFLLFVBQVUsS0FBSyxVQUFVO1lBQzVCLE9BQU8sSUFBQSxpQ0FBb0IsRUFBQztnQkFDMUIsS0FBSztnQkFDTCxlQUFlO2dCQUNmLFlBQVk7Z0JBQ1osU0FBUztnQkFDVCxVQUFVO2dCQUNWLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTthQUMxQixDQUFDLENBQUM7UUFDTDtZQUNFLE9BQU8sd0JBQXdCLENBQUMsU0FBUyxDQUFDLENBQUM7S0FDOUM7QUFDSCxDQUFDO0FBbkRELG1DQW1EQyJ9