"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const build_default_condition_1 = __importDefault(require("./utils/build-default-condition"));
const find_enum_value_1 = __importDefault(require("./utils/find-enum-value"));
function buildEnumFieldFilter(field, schema, searchString, isNegated) {
    const { filterOperators } = schema;
    const searchValue = (0, find_enum_value_1.default)(searchString, schema);
    if (!searchValue)
        return (0, build_default_condition_1.default)(isNegated);
    if (filterOperators?.has('Equal') && !isNegated) {
        return new datasource_toolkit_1.ConditionTreeLeaf(field, 'Equal', searchValue);
    }
    if (filterOperators?.has('NotEqual') && filterOperators?.has('Missing') && isNegated) {
        // In DBs, NULL values are not equal to anything, including NULL.
        return datasource_toolkit_1.ConditionTreeFactory.union(new datasource_toolkit_1.ConditionTreeLeaf(field, 'NotEqual', searchValue), new datasource_toolkit_1.ConditionTreeLeaf(field, 'Missing'));
    }
    if (filterOperators?.has('NotEqual') && isNegated) {
        return new datasource_toolkit_1.ConditionTreeLeaf(field, 'NotEqual', searchValue);
    }
    return (0, build_default_condition_1.default)(isNegated);
}
exports.default = buildEnumFieldFilter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQtZW51bS1maWVsZC1maWx0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZGVjb3JhdG9ycy9zZWFyY2gvZmlsdGVyLWJ1aWxkZXIvYnVpbGQtZW51bS1maWVsZC1maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFLeUM7QUFFekMsOEZBQW9FO0FBQ3BFLDhFQUFvRDtBQUVwRCxTQUF3QixvQkFBb0IsQ0FDMUMsS0FBYSxFQUNiLE1BQW9CLEVBQ3BCLFlBQW9CLEVBQ3BCLFNBQWtCO0lBRWxCLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDbkMsTUFBTSxXQUFXLEdBQUcsSUFBQSx5QkFBYSxFQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUV4RCxJQUFJLENBQUMsV0FBVztRQUFFLE9BQU8sSUFBQSxpQ0FBcUIsRUFBQyxTQUFTLENBQUMsQ0FBQztJQUUxRCxJQUFJLGVBQWUsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDL0MsT0FBTyxJQUFJLHNDQUFpQixDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7S0FDM0Q7SUFFRCxJQUFJLGVBQWUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksZUFBZSxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLEVBQUU7UUFDcEYsaUVBQWlFO1FBQ2pFLE9BQU8seUNBQW9CLENBQUMsS0FBSyxDQUMvQixJQUFJLHNDQUFpQixDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLEVBQ3JELElBQUksc0NBQWlCLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUN4QyxDQUFDO0tBQ0g7SUFFRCxJQUFJLGVBQWUsRUFBRSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksU0FBUyxFQUFFO1FBQ2pELE9BQU8sSUFBSSxzQ0FBaUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0tBQzlEO0lBRUQsT0FBTyxJQUFBLGlDQUFxQixFQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUE1QkQsdUNBNEJDIn0=