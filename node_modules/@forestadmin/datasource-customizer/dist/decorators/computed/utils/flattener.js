"use strict";
/**
 * To compute the fields in parallel, it is much easier to represent the records as a group of
 * arrays, one array per field.
 *
 * The issue with this transformation is that it is not a bijective function.
 *
 * When we flatten:
 * - { title: 'Foundation', author: { country: null } }
 *
 * After flattening/unflattening, we don't know if the original record was:
 * - { title: 'Foundation', author: { country: null } }
 * - { title: 'Foundation', author: null }
 *
 * This is why we add a special marker to the projection, to keep track of null values.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.flatten = exports.unflatten = exports.withNullMarkers = void 0;
const markerName = '__nullMarker';
function withNullMarkers(projection) {
    const set = new Set(projection);
    for (const path of projection) {
        const parts = path.split(':');
        for (let i = 1; i < parts.length; i += 1) {
            set.add(`${parts.slice(0, i).join(':')}:${markerName}`);
        }
    }
    return [...set];
}
exports.withNullMarkers = withNullMarkers;
function unflatten(flatList, projection) {
    const numRecords = flatList[0]?.length ?? 0;
    const records = [];
    for (let recordIndex = 0; recordIndex < numRecords; recordIndex += 1) {
        records[recordIndex] = {};
        for (const [pathIndex, path] of projection.entries()) {
            // When a marker is found, the parent is null.
            const parts = path.split(':').filter(part => part !== markerName);
            const value = flatList[pathIndex][recordIndex];
            // Ignore undefined values.
            if (value === undefined)
                continue; // eslint-disable-line no-continue
            // Set all others (including null)
            let record = records[recordIndex];
            for (let partIndex = 0; partIndex < parts.length; partIndex += 1) {
                const part = parts[partIndex];
                if (partIndex === parts.length - 1)
                    record[part] = value;
                else if (!record[part])
                    record[part] = {};
                record = record[part];
            }
        }
    }
    return records;
}
exports.unflatten = unflatten;
function flatten(records, paths) {
    return paths.map(field => {
        const parts = field.split(':');
        return records.map(record => {
            let value = record;
            for (let i = 0; i < parts.length - 1; i += 1) {
                value = value?.[parts[i]];
            }
            // for markers, the value tells us which fields are null so that we can set them.
            if (parts[parts.length - 1] === markerName)
                return value === null ? null : undefined;
            return value?.[parts[parts.length - 1]];
        });
    });
}
exports.flatten = flatten;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdHRlbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2RlY29yYXRvcnMvY29tcHV0ZWQvdXRpbHMvZmxhdHRlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7R0FjRzs7O0FBRUgsTUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDO0FBRWxDLFNBQWdCLGVBQWUsQ0FBQyxVQUFvQjtJQUNsRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVoQyxLQUFLLE1BQU0sSUFBSSxJQUFJLFVBQVUsRUFBRTtRQUM3QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDeEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3pEO0tBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUNsQixDQUFDO0FBWkQsMENBWUM7QUFFRCxTQUFnQixTQUFTLENBQUMsUUFBcUIsRUFBRSxVQUFvQjtJQUNuRSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxJQUFJLENBQUMsQ0FBQztJQUM1QyxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7SUFFbkIsS0FBSyxJQUFJLFdBQVcsR0FBRyxDQUFDLEVBQUUsV0FBVyxHQUFHLFVBQVUsRUFBRSxXQUFXLElBQUksQ0FBQyxFQUFFO1FBQ3BFLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFMUIsS0FBSyxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNwRCw4Q0FBOEM7WUFDOUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUM7WUFDbEUsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBRS9DLDJCQUEyQjtZQUMzQixJQUFJLEtBQUssS0FBSyxTQUFTO2dCQUFFLFNBQVMsQ0FBQyxrQ0FBa0M7WUFFckUsa0NBQWtDO1lBQ2xDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUVsQyxLQUFLLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxTQUFTLElBQUksQ0FBQyxFQUFFO2dCQUNoRSxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBRTlCLElBQUksU0FBUyxLQUFLLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQztvQkFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDO3FCQUNwRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztvQkFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUUxQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3ZCO1NBQ0Y7S0FDRjtJQUVELE9BQU8sT0FBTyxDQUFDO0FBQ2pCLENBQUM7QUE5QkQsOEJBOEJDO0FBRUQsU0FBZ0IsT0FBTyxDQUFDLE9BQWtCLEVBQUUsS0FBZTtJQUN6RCxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDdkIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUvQixPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDO1lBRW5CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM1QyxLQUFLLEdBQUcsS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0I7WUFFRCxpRkFBaUY7WUFDakYsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsS0FBSyxVQUFVO2dCQUFFLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFFckYsT0FBTyxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBakJELDBCQWlCQyJ9