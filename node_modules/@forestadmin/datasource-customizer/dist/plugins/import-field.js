"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
async function importField(dataSourceCustomizer, collectionCustomizer, options) {
    const name = options.name;
    const { schema } = options.path.split(':').reduce((memo, field) => {
        const collection = dataSourceCustomizer.getCollection(memo.collection);
        const fieldSchema = collection.schema.fields[field];
        if (fieldSchema === undefined) {
            throw new Error(`Field ${field} not found in collection ${collection.name}`);
        }
        if (fieldSchema.type === 'Column')
            return { schema: fieldSchema };
        if (fieldSchema.type === 'ManyToOne' || fieldSchema.type === 'OneToOne') {
            return { collection: fieldSchema.foreignCollection };
        }
        throw new Error('Invalid options.path');
    }, { collection: collectionCustomizer.name });
    collectionCustomizer.addField(name, {
        columnType: schema.columnType,
        defaultValue: schema.defaultValue,
        dependencies: [options.path],
        getValues: records => records.map(r => datasource_toolkit_1.RecordUtils.getFieldValue(r, options.path)),
        enumValues: schema.enumValues,
    });
    if (!schema.isReadOnly && !options.readonly) {
        collectionCustomizer.replaceFieldWriting(name, value => {
            const path = options.path.split(':');
            const writingPath = {};
            path.reduce((nestedPath, currentPath, index) => {
                nestedPath[currentPath] = index === path.length - 1 ? value : {};
                return nestedPath[currentPath];
            }, writingPath);
            return writingPath;
        });
    }
    if (schema.isReadOnly && options.readonly === false) {
        throw new Error(`Readonly option should not be false because the field "${options.path}" is not writable`);
    }
    for (const operator of schema.filterOperators) {
        const handler = value => ({ field: options.path, operator, value });
        collectionCustomizer.replaceFieldOperator(name, operator, handler);
    }
    if (schema.isSortable) {
        collectionCustomizer.replaceFieldSorting(name, [{ field: options.path, ascending: true }]);
    }
}
exports.default = importField;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0LWZpZWxkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BsdWdpbnMvaW1wb3J0LWZpZWxkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0VBQTRFO0FBTzdELEtBQUssVUFBVSxXQUFXLENBSXZDLG9CQUE2QyxFQUM3QyxvQkFBZ0QsRUFDaEQsT0FBcUU7SUFFckUsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQXlCLENBQUM7SUFDL0MsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FDL0MsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDZCxNQUFNLFVBQVUsR0FBRyxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQWdDLENBQUMsQ0FBQztRQUM3RixNQUFNLFdBQVcsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVwRCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxTQUFTLEtBQUssNEJBQTRCLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzlFO1FBRUQsSUFBSSxXQUFXLENBQUMsSUFBSSxLQUFLLFFBQVE7WUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDO1FBRWxFLElBQUksV0FBVyxDQUFDLElBQUksS0FBSyxXQUFXLElBQUksV0FBVyxDQUFDLElBQUksS0FBSyxVQUFVLEVBQUU7WUFDdkUsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztTQUN0RDtRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLENBQUMsQ0FBQztJQUMxQyxDQUFDLEVBQ0QsRUFBRSxVQUFVLEVBQUUsb0JBQW9CLENBQUMsSUFBSSxFQUFFLENBQzFDLENBQUM7SUFFRixvQkFBb0IsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1FBQ2xDLFVBQVUsRUFBRSxNQUFNLENBQUMsVUFBVTtRQUM3QixZQUFZLEVBQUUsTUFBTSxDQUFDLFlBQVk7UUFDakMsWUFBWSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUM1QixTQUFTLEVBQUUsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0NBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRixVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVU7S0FDOUIsQ0FBQyxDQUFDO0lBRUgsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1FBQzNDLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRTtZQUNyRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNyQyxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7WUFFdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQzdDLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxLQUFLLEtBQUssSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUVqRSxPQUFPLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNqQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFaEIsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUVELElBQUksTUFBTSxDQUFDLFVBQVUsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLEtBQUssRUFBRTtRQUNuRCxNQUFNLElBQUksS0FBSyxDQUNiLDBEQUEwRCxPQUFPLENBQUMsSUFBSSxtQkFBbUIsQ0FDMUYsQ0FBQztLQUNIO0lBRUQsS0FBSyxNQUFNLFFBQVEsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFO1FBQzdDLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsT0FBbUMsQ0FBQyxDQUFDO0tBQ2hHO0lBRUQsSUFBSSxNQUFNLENBQUMsVUFBVSxFQUFFO1FBQ3JCLG9CQUFvQixDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztLQUM1RjtBQUNILENBQUM7QUFsRUQsOEJBa0VDIn0=