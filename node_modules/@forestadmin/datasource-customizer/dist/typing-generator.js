"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const promises_1 = require("fs/promises");
class TypingGenerator {
    constructor(logger, options = {}) {
        this.logger = logger;
        this.options = {
            maxFieldsCount: 10000,
        };
        this.options.maxFieldsCount = options.maxFieldsCount ?? this.options.maxFieldsCount;
    }
    static sortedEntries(...args) {
        return Object.entries(...args).sort(([name1], [name2]) => name1.localeCompare(name2));
    }
    /**
     * Write types to disk at a given path.
     * This method read the file which is already there before overwriting so that customers
     * using equivalents to nodemon to not enter restart loops.
     */
    async updateTypesOnFileSystem(dataSource, typingsPath, typingsMaxDepth) {
        const newTypes = this.generateTypes(dataSource, typingsMaxDepth);
        let olderTypes = null;
        try {
            olderTypes = await (0, promises_1.readFile)(typingsPath, { encoding: 'utf-8' });
        }
        catch (e) {
            if (e.code === 'ENOENT')
                olderTypes = null;
            else
                throw e;
        }
        if (newTypes !== olderTypes) {
            await (0, promises_1.writeFile)(typingsPath, newTypes, { encoding: 'utf-8' });
        }
    }
    /**
     * Generates types on a string.
     */
    generateTypes(dataSource, maxDepth) {
        const collections = [...dataSource.collections].sort((a, b) => a.name.localeCompare(b.name));
        return [
            `/* eslint-disable */`,
            `import {`,
            `  CollectionCustomizer,`,
            `  TAggregation,`,
            `  TConditionTree,`,
            `  TPaginatedFilter,`,
            `  TPartialRow,`,
            `  TSortClause`,
            `} from '@forestadmin/agent';`,
            '',
            this.generateAliases(dataSource),
            '',
            'export type Schema = {',
            ...collections.map(collection => [
                `  '${collection.name}': {`,
                this.getRow(collection),
                this.getRelations(collection),
                this.getFlatRelations(collection, maxDepth),
                '  };',
            ].join(`\n`)),
            '};\n',
        ].join('\n');
    }
    generateAliases(dataSource) {
        return dataSource.collections
            .flatMap(collection => {
            const name = collection.name.slice(0, 1).toUpperCase() +
                collection.name.slice(1).replace(/(_|-)[a-z]/g, match => match.slice(1).toUpperCase());
            return [
                `export type ${name}Customizer = CollectionCustomizer<Schema, '${collection.name}'>;`,
                `export type ${name}Record = TPartialRow<Schema, '${collection.name}'>;`,
                `export type ${name}ConditionTree = TConditionTree<Schema, '${collection.name}'>;`,
                `export type ${name}Filter = TPaginatedFilter<Schema, '${collection.name}'>;`,
                `export type ${name}SortClause = TSortClause<Schema, '${collection.name}'>;`,
                `export type ${name}Aggregation = TAggregation<Schema, '${collection.name}'>;`,
                '',
            ];
        })
            .join('\n');
    }
    getRow(collection) {
        const content = TypingGenerator.sortedEntries(collection.schema.fields).reduce((memo, [name, field]) => {
            return field.type === 'Column'
                ? [...memo, `      '${name}': ${this.getStrictType(field)};`]
                : memo;
        }, []);
        return `    plain: {\n${content.join('\n')}\n    };`;
    }
    getRelations(collection) {
        const content = TypingGenerator.sortedEntries(collection.schema.fields).reduce((memo, [name, field]) => {
            if (field.type === 'ManyToOne' || field.type === 'OneToOne') {
                const relation = field.foreignCollection;
                return [
                    ...memo,
                    `      '${name}': Schema['${relation}']['plain'] & Schema['${relation}']['nested'];`,
                ];
            }
            return memo;
        }, []);
        return content.length ? `    nested: {\n${content.join('\n')}\n    };` : `    nested: {};`;
    }
    getFlatRelations(collection, maxDepth) {
        const fields = this.getFieldsOnCollection(collection, maxDepth);
        return fields.length
            ? `    flat: {\n      ${fields.join('\n      ')}\n    };`
            : `    flat: {};`;
    }
    getFieldsOnCollection(mainCollection, maxDepth) {
        const result = [];
        const queue = [{ collection: mainCollection, depth: 0, prefix: '', traversed: [] }];
        while (queue.length > 0 && result.length < this.options.maxFieldsCount) {
            const { collection, depth, prefix, traversed } = queue.shift();
            const sortedFields = TypingGenerator.sortedEntries(collection.schema.fields);
            if (prefix) {
                result.push(...sortedFields
                    .filter(([, schema]) => schema.type === 'Column')
                    .map(([name, schema]) => `'${prefix}:${name}': ${this.getStrictType(schema)};`));
            }
            if (depth < maxDepth) {
                queue.push(...sortedFields
                    .filter(([, schema]) => schema.type === 'ManyToOne' || schema.type === 'OneToOne')
                    .map(([name, schema]) => {
                    return {
                        subCollection: collection.dataSource.getCollection(schema.foreignCollection),
                        inverse: datasource_toolkit_1.CollectionUtils.getInverseRelation(collection, name),
                        name,
                        schema,
                    };
                })
                    .filter(({ subCollection, inverse }) => {
                    // Do not expand inverse relations, as those create useless cycles
                    return !traversed.find(({ c, r }) => c === subCollection && r === inverse);
                })
                    .map(({ subCollection, name }) => {
                    return {
                        collection: subCollection,
                        depth: depth + 1,
                        prefix: prefix ? `${prefix}:${name}` : name,
                        traversed: [...traversed, { c: collection, r: name }],
                    };
                }));
            }
        }
        if (queue.length || result.length >= this.options.maxFieldsCount) {
            this.logger?.('Warn', `Fields generation stopped on collection ${mainCollection.name}, ` +
                `try using a lower typingsMaxDepth (${maxDepth}) to avoid this issue.`);
        }
        return result.slice(0, this.options.maxFieldsCount);
    }
    getStrictType(columnSchema) {
        const isRequired = (columnSchema.validation?.some(v => v.operator === 'Present') ||
            columnSchema.isPrimaryKey ||
            columnSchema.allowNull === false) ??
            false;
        return `${this.getType(columnSchema)}${isRequired ? '' : ' | null'}`;
    }
    getType(field) {
        if (Array.isArray(field.columnType)) {
            return `Array<${this.getType({
                columnType: field.columnType[0],
                enumValues: field.enumValues,
            })}>`;
        }
        if (field.columnType === 'Enum') {
            if (field.enumValues === undefined)
                return 'string';
            return ([...field.enumValues]
                .sort((v1, v2) => v1.localeCompare(v2))
                .map(v => `'${v.replace(/'/g, "\\'")}'`)
                .join(' | ') ?? 'string');
        }
        if (typeof field.columnType === 'string') {
            return {
                Boolean: 'boolean',
                Binary: 'Buffer',
                Date: 'string',
                Dateonly: 'string',
                Json: 'any',
                Number: 'number',
                Point: '[number, number]',
                String: 'string',
                Time: 'string',
                Uuid: 'string',
            }[field.columnType];
        }
        return `{${TypingGenerator.sortedEntries(field.columnType)
            .map(([key, subType]) => `'${key}': ${this.getType({ columnType: subType })}`)
            .join('; ')}}`;
    }
}
exports.default = TypingGenerator;
//# sourceMappingURL=data:application/json;base64,