"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const forestadmin_client_1 = require("@forestadmin/forestadmin-client");
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const koa_jwt_1 = __importDefault(require("koa-jwt"));
const types_1 = require("../../types");
const base_route_1 = __importDefault(require("../base-route"));
class Authentication extends base_route_1.default {
    constructor() {
        super(...arguments);
        this.type = types_1.RouteType.Authentication;
    }
    async bootstrap() {
        await this.options.forestAdminClient.authService.init();
    }
    setupRoutes(router) {
        router.post('/authentication', this.handleAuthentication.bind(this));
        router.get('/authentication/callback', this.handleError.bind(this), this.handleAuthenticationCallback.bind(this));
        router.use((0, koa_jwt_1.default)({ secret: this.options.authSecret, cookie: 'forest_session_token' }));
    }
    async handleAuthentication(context) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const body = context.request.body;
        const renderingId = Number(body?.renderingId);
        Authentication.checkRenderingId(renderingId);
        const authorizationUrl = await this.options.forestAdminClient.authService.generateAuthorizationUrl({
            scope: 'openid email profile',
            state: JSON.stringify({ renderingId }),
        });
        context.response.body = { authorizationUrl };
    }
    async handleAuthenticationCallback(context) {
        // Retrieve renderingId
        const { query } = context.request;
        const state = query.state.toString();
        let renderingId;
        try {
            renderingId = JSON.parse(state).renderingId;
            Authentication.checkRenderingId(renderingId);
        }
        catch {
            throw new datasource_toolkit_1.ValidationError('Failed to retrieve renderingId from query[state]');
        }
        // Retrieve user
        const tokenSet = await this.options.forestAdminClient.authService.generateTokens({
            query,
            state,
        });
        const { accessToken } = tokenSet;
        const user = await this.options.forestAdminClient.authService.getUserInfo(renderingId, accessToken);
        // Generate final token.
        const token = jsonwebtoken_1.default.sign(user, this.options.authSecret, { expiresIn: '1 hours' });
        context.response.body = { token, tokenData: jsonwebtoken_1.default.decode(token) };
    }
    static checkRenderingId(renderingId) {
        if (Number.isNaN(renderingId)) {
            throw new datasource_toolkit_1.ValidationError('Rendering id must be a number');
        }
    }
    async handleError(context, next) {
        try {
            await next();
        }
        catch (e) {
            if (e instanceof forestadmin_client_1.ForbiddenError) {
                context.response.status = 403;
                context.response.body = {
                    error: 403,
                    error_description: e.message,
                };
                return;
            }
            if (e instanceof forestadmin_client_1.AuthenticationError) {
                context.response.status = 401;
                context.response.body = {
                    error: e.code,
                    error_description: e.description,
                    state: e.state,
                };
                return;
            }
            throw e;
        }
    }
}
exports.default = Authentication;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3NlY3VyaXR5L2F1dGhlbnRpY2F0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBQWtFO0FBQ2xFLHdFQUFzRjtBQUV0RixnRUFBd0M7QUFFeEMsc0RBQTBCO0FBRTFCLHVDQUF3QztBQUN4QywrREFBc0M7QUFFdEMsTUFBcUIsY0FBZSxTQUFRLG9CQUFTO0lBQXJEOztRQUNXLFNBQUksR0FBRyxpQkFBUyxDQUFDLGNBQWMsQ0FBQztJQWdHM0MsQ0FBQztJQTlGVSxLQUFLLENBQUMsU0FBUztRQUN0QixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFELENBQUM7SUFFRCxXQUFXLENBQUMsTUFBYztRQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyRSxNQUFNLENBQUMsR0FBRyxDQUNSLDBCQUEwQixFQUMxQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDM0IsSUFBSSxDQUFDLDRCQUE0QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDN0MsQ0FBQztRQUVGLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBQSxpQkFBRyxFQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RixDQUFDO0lBRU8sS0FBSyxDQUFDLG9CQUFvQixDQUFDLE9BQWdCO1FBQ2pELDhEQUE4RDtRQUM5RCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQVcsQ0FBQztRQUN6QyxNQUFNLFdBQVcs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