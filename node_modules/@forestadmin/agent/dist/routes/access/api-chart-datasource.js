"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const uuid_1 = require("uuid");
const types_1 = require("../../types");
const query_string_1 = __importDefault(require("../../utils/query-string"));
const base_route_1 = __importDefault(require("../base-route"));
class DataSourceApiChartRoute extends base_route_1.default {
    get chartUrlSlug() {
        return this.escapeUrlSlug(this.chartName);
    }
    constructor(services, options, dataSource, chartName) {
        super(services, options);
        this.type = types_1.RouteType.PrivateRoute;
        this.dataSource = dataSource;
        this.chartName = chartName;
    }
    setupRoutes(router) {
        // Mount both GET and POST, respectively for smart and api charts.
        const suffix = `/_charts/${this.chartUrlSlug}`;
        router.get(suffix, this.handleSmartChart.bind(this));
        router.post(suffix, this.handleApiChart.bind(this));
        // Log the route to help the customer fill the url in the frontend
        if (!this.options.isProduction) {
            const url = path_1.default.posix.join('/', this.options.prefix, 'forest', suffix);
            this.options.logger('Info', `Chart '${this.chartName}' was mounted at '${url}'`);
        }
    }
    async handleApiChart(context) {
        // Api Charts need the data to be formatted in JSON-API
        context.response.body = {
            data: {
                id: (0, uuid_1.v1)(),
                type: 'stats',
                attributes: {
                    value: await this.dataSource.renderChart(query_string_1.default.parseCaller(context), this.chartName),
                },
            },
        };
    }
    async handleSmartChart(context) {
        // Smart charts need the data to be unformatted
        context.response.body = await this.dataSource.renderChart(query_string_1.default.parseCaller(context), this.chartName);
    }
}
exports.default = DataSourceApiChartRoute;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLWNoYXJ0LWRhdGFzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2FjY2Vzcy9hcGktY2hhcnQtZGF0YXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUdBLGdEQUF3QjtBQUN4QiwrQkFBb0M7QUFHcEMsdUNBQWtFO0FBQ2xFLDRFQUF5RDtBQUN6RCwrREFBc0M7QUFFdEMsTUFBcUIsdUJBQXdCLFNBQVEsb0JBQVM7SUFNNUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQsWUFDRSxRQUF1QyxFQUN2QyxPQUFpQyxFQUNqQyxVQUFzQixFQUN0QixTQUFpQjtRQUVqQixLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBZmxCLFNBQUksR0FBRyxpQkFBUyxDQUFDLFlBQVksQ0FBQztRQWlCckMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDN0IsQ0FBQztJQUVELFdBQVcsQ0FBQyxNQUFjO1FBQ3hCLGtFQUFrRTtRQUNsRSxNQUFNLE1BQU0sR0FBRyxZQUFZLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMvQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDckQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUVwRCxrRUFBa0U7UUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFO1lBQzlCLE1BQU0sR0FBRyxHQUFHLGNBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDeEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLFVBQVUsSUFBSSxDQUFDLFNBQVMscUJBQXFCLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDbEY7SUFDSCxDQUFDO0lBRU8sS0FBSyxDQUFDLGNBQWMsQ0FBQyxPQUFnQjtRQUMzQyx1REFBdUQ7UUFDdkQsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUc7WUFDdEIsSUFBSSxFQUFFO2dCQUNKLEVBQUUsRUFBRSxJQUFBLFNBQU0sR0FBRTtnQkFDWixJQUFJLEVBQUUsT0FBTztnQkFDYixVQUFVLEVBQUU7b0JBQ1YsS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQ3RDLHNCQUFpQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FDZjtpQkFDRjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFTyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsT0FBZ0I7UUFDN0MsK0NBQStDO1FBQy9DLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQ3ZELHNCQUFpQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFDdEMsSUFBSSxDQUFDLFNBQVMsQ0FDZixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBMURELDBDQTBEQyJ9