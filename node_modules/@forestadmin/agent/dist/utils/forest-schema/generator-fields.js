"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const datasource_toolkit_1 = require("@forestadmin/datasource-toolkit");
const column_schema_validator_1 = __importDefault(require("./column-schema-validator"));
const filterable_1 = __importDefault(require("./filterable"));
const validation_1 = __importDefault(require("./validation"));
class SchemaGeneratorFields {
    static buildSchema(collection, name) {
        const { type } = collection.schema.fields[name];
        let schema;
        switch (type) {
            case 'Column':
                schema = SchemaGeneratorFields.buildColumnSchema(collection, name);
                break;
            case 'ManyToOne':
            case 'OneToMany':
            case 'ManyToMany':
            case 'OneToOne':
                schema = SchemaGeneratorFields.buildRelationSchema(collection, name);
                break;
            default:
                throw new datasource_toolkit_1.ValidationError('Invalid field type');
        }
        return Object.entries(schema)
            .sort()
            .reduce((sortedSchema, [key, value]) => {
            sortedSchema[key] = value;
            return sortedSchema;
        }, {});
    }
    static buildColumnSchema(collection, name) {
        const column = collection.schema.fields[name];
        column_schema_validator_1.default.validate(column, name);
        const isForeignKey = datasource_toolkit_1.SchemaUtils.isForeignKey(collection.schema, name);
        return {
            defaultValue: column.defaultValue ?? null,
            enums: [...(column.enumValues ?? [])].sort() ?? null,
            field: name,
            integration: null,
            inverseOf: null,
            isFilterable: filterable_1.default.isFilterable(column.columnType, column.filterOperators),
            isPrimaryKey: Boolean(column.isPrimaryKey),
            // When a column is a foreign key, it is readonly.
            // This may sound counter-intuitive: it is so that the user don't have two fields which
            // allow updating the same foreign key in the detail-view form (fk + many to one)
            isReadOnly: isForeignKey || Boolean(column.isReadOnly),
            isRequired: column.validation?.some(v => v.operator === 'Present') ?? false,
            isSortable: Boolean(column.isSortable),
            isVirtual: false,
            reference: null,
            type: this.convertColumnType(column.columnType),
            validations: validation_1.default.convertValidationList(column),
        };
    }
    static convertColumnType(type) {
        if (typeof type === 'string')
            return type;
        if (Array.isArray(type)) {
            return [this.convertColumnType(type[0])];
        }
        return {
            fields: Object.entries(type).map(([key, subType]) => ({
                field: key,
                type: this.convertColumnType(subType),
            })),
        };
    }
    static buildToManyRelationSchema(relation, collection, foreignCollection, baseSchema) {
        let targetName;
        let targetField;
        let isReadOnly;
        if (relation.type === 'OneToMany') {
            targetName = relation.originKeyTarget;
            targetField = collection.schema.fields[targetName];
            const originKey = foreignCollection.schema.fields[relation.originKey];
            isReadOnly = originKey.isReadOnly;
        }
        else {
            targetName = relation.foreignKeyTarget;
            targetField = foreignCollection.schema.fields[targetName];
            const throughSchema = collection.dataSource.getCollection(relation.throughCollection).schema;
            const foreignKey = throughSchema.fields[relation.foreignKey];
            const originKey = throughSchema.fields[relation.originKey];
            isReadOnly = originKey.isReadOnly || foreignKey.isReadOnly;
        }
        return {
            ...baseSchema,
            type: [targetField.columnType],
            defaultValue: null,
            isFilterable: false,
            isPrimaryKey: false,
            isRequired: false,
            isReadOnly: Boolean(isReadOnly),
            isSortable: true,
            validations: [],
            reference: `${foreignCollection.name}.${targetName}`,
        };
    }
    static isForeignCollectionFilterable(foreignCollection) {
        return Object.values(foreignCollection.schema.fields).some(field => field.type === 'Column' &&
            filterable_1.default.isFilterable(field.columnType, field.filterOperators));
    }
    static buildOneToOneSchema(relation, collection, foreignCollection, baseSchema) {
        const targetField = collection.schema.fields[relation.originKeyTarget];
        const keyField = foreignCollection.schema.fields[relation.originKey];
        return {
            ...baseSchema,
            type: keyField.columnType,
            defaultValue: null,
            isFilterable: SchemaGeneratorFields.isForeignCollectionFilterable(foreignCollection),
            isPrimaryKey: false,
            isRequired: false,
            isReadOnly: Boolean(keyField.isReadOnly),
            isSortable: Boolean(targetField.isSortable),
            validations: [],
            reference: `${foreignCollection.name}.${relation.originKeyTarget}`,
        };
    }
    static buildManyToOneSchema(relation, collection, foreignCollection, baseSchema) {
        const keyField = collection.schema.fields[relation.foreignKey];
        return {
            ...baseSchema,
            type: keyField.columnType,
            defaultValue: keyField.defaultValue ?? null,
            isFilterable: SchemaGeneratorFields.isForeignCollectionFilterable(foreignCollection),
            // Always set false even if the foreign key is the primary key.
            // Doing otherwise breaks the frontend when no reference field is set.
            isPrimaryKey: false,
            isRequired: keyField.validation?.some(v => v.operator === 'Present') ?? false,
            isReadOnly: Boolean(keyField.isReadOnly),
            isSortable: Boolean(keyField.isSortable),
            validations: validation_1.default.convertValidationList(keyField),
            reference: `${foreignCollection.name}.${relation.foreignKeyTarget}`,
        };
    }
    static buildRelationSchema(collection, name) {
        const relation = collection.schema.fields[name];
        const foreignCollection = collection.dataSource.getCollection(relation.foreignCollection);
        const relationSchema = {
            field: name,
            enums: null,
            integration: null,
            isVirtual: false,
            inverseOf: datasource_toolkit_1.CollectionUtils.getInverseRelation(collection, name),
            relationship: SchemaGeneratorFields.relationMap[relation.type],
        };
        switch (relation.type) {
            case 'ManyToMany':
            case 'OneToMany':
                return SchemaGeneratorFields.buildToManyRelationSchema(relation, collection, foreignCollection, relationSchema);
            case 'OneToOne':
                return SchemaGeneratorFields.buildOneToOneSchema(relation, collection, foreignCollection, relationSchema);
            default:
                return SchemaGeneratorFields.buildManyToOneSchema(relation, collection, foreignCollection, relationSchema);
        }
    }
}
exports.default = SchemaGeneratorFields;
SchemaGeneratorFields.relationMap = {
    ManyToMany: 'BelongsToMany',
    ManyToOne: 'BelongsTo',
    OneToMany: 'HasMany',
    OneToOne: 'HasOne',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdG9yLWZpZWxkcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9mb3Jlc3Qtc2NoZW1hL2dlbmVyYXRvci1maWVsZHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFjeUM7QUFHekMsd0ZBQThEO0FBQzlELDhEQUFtRDtBQUNuRCw4REFBbUQ7QUFFbkQsTUFBcUIscUJBQXFCO0lBUXhDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBc0IsRUFBRSxJQUFZO1FBQ3JELE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVoRCxJQUFJLE1BQXlCLENBQUM7UUFFOUIsUUFBUSxJQUFJLEVBQUU7WUFDWixLQUFLLFFBQVE7Z0JBQ1gsTUFBTSxHQUFHLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDbkUsTUFBTTtZQUVSLEtBQUssV0FBVyxDQUFDO1lBQ2pCLEtBQUssV0FBVyxDQUFDO1lBQ2pCLEtBQUssWUFBWSxDQUFDO1lBQ2xCLEtBQUssVUFBVTtnQkFDYixNQUFNLEdBQUcscUJBQXFCLENBQUMsbUJBQW1CLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUNyRSxNQUFNO1lBRVI7Z0JBQ0UsTUFBTSxJQUFJLG9DQUFlLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUNuRDtRQUVELE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7YUFDMUIsSUFBSSxFQUFFO2FBQ04sTUFBTSxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDckMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUUxQixPQUFPLFlBQVksQ0FBQztRQUN0QixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7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