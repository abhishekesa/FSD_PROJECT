"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const branch_1 = __importDefault(require("./nodes/branch"));
const leaf_1 = __importDefault(require("./nodes/leaf"));
const record_1 = __importDefault(require("../../../utils/record"));
const schema_1 = __importDefault(require("../../../utils/schema"));
class ConditionTreeFactory {
    static matchRecords(schema, records) {
        const ids = records.map(r => record_1.default.getPrimaryKey(schema, r));
        return ConditionTreeFactory.matchIds(schema, ids);
    }
    static matchIds(schema, ids) {
        const primaryKeyNames = schema_1.default.getPrimaryKeys(schema);
        if (primaryKeyNames.length === 0) {
            throw new Error('Collection must have at least one primary key');
        }
        for (const name of primaryKeyNames) {
            const operators = schema.fields[name].filterOperators;
            if (!operators?.has('Equal') || !operators?.has('In')) {
                throw new Error(`Field '${name}' must support operators: ['Equal', 'In']`);
            }
        }
        return ConditionTreeFactory.matchFields(primaryKeyNames, ids);
    }
    static union(...trees) {
        if (trees.length === 1)
            return trees[0];
        return ConditionTreeFactory.group('Or', trees);
    }
    static intersect(...trees) {
        const result = ConditionTreeFactory.group('And', trees);
        const isEmptyAnd = result instanceof branch_1.default &&
            result.aggregator === 'And' &&
            result.conditions.length === 0;
        return isEmptyAnd ? null : result;
    }
    static fromPlainObject(json) {
        if (json === null)
            return null;
        if (ConditionTreeFactory.isLeaf(json)) {
            return new leaf_1.default(json.field, json.operator, json.value);
        }
        if (ConditionTreeFactory.isBranch(json)) {
            const branch = new branch_1.default(json.aggregator, json.conditions.map(subTree => ConditionTreeFactory.fromPlainObject(subTree)));
            return branch.conditions.length !== 1 ? branch : branch.conditions[0];
        }
        throw new Error('Failed to instantiate condition tree from json');
    }
    static matchFields(fields, values) {
        if (values.length === 0)
            return ConditionTreeFactory.MatchNone;
        if (fields.length === 1) {
            const fieldValues = values.map(tuple => tuple[0]);
            return fieldValues.length > 1
                ? new leaf_1.default(fields[0], 'In', fieldValues)
                : new leaf_1.default(fields[0], 'Equal', fieldValues[0]);
        }
        const [firstField, ...otherFields] = fields;
        const groups = new Map();
        for (const [firstValue, ...otherValues] of values) {
            if (groups.has(firstValue))
                groups.get(firstValue).push(otherValues);
            else
                groups.set(firstValue, [otherValues]);
        }
        return ConditionTreeFactory.union(...[...groups.entries()].map(([firstValue, subValues]) => ConditionTreeFactory.intersect(ConditionTreeFactory.matchFields([firstField], [[firstValue]]), ConditionTreeFactory.matchFields(otherFields, subValues))));
    }
    static group(aggregator, trees) {
        const conditions = trees
            .filter(Boolean)
            .reduce((currentConditions, tree) => tree instanceof branch_1.default && tree.aggregator === aggregator
            ? [...currentConditions, ...tree.conditions]
            : [...currentConditions, tree], []);
        if (conditions.length === 1) {
            return conditions[0];
        }
        return new branch_1.default(aggregator, conditions);
    }
    static isLeaf(raw) {
        return typeof raw === 'object' && 'field' in raw && 'operator' in raw;
    }
    static isBranch(raw) {
        return typeof raw === 'object' && 'aggregator' in raw && 'conditions' in raw;
    }
}
exports.default = ConditionTreeFactory;
ConditionTreeFactory.MatchNone = new branch_1.default('Or', []);
ConditionTreeFactory.MatchAll = null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9pbnRlcmZhY2VzL3F1ZXJ5L2NvbmRpdGlvbi10cmVlL2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSw0REFBaUU7QUFDakUsd0RBQTZDO0FBRTdDLG1FQUFnRDtBQUNoRCxtRUFBZ0Q7QUFRaEQsTUFBcUIsb0JBQW9CO0lBSXZDLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBd0IsRUFBRSxPQUFxQjtRQUNqRSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkUsT0FBTyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQXdCLEVBQUUsR0FBa0I7UUFDMUQsTUFBTSxlQUFlLEdBQUcsZ0JBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFM0QsSUFBSSxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNoQyxNQUFNLElBQUksS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7U0FDbEU7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLGVBQWUsRUFBRTtZQUNsQyxNQUFNLFNBQVMsR0FBSSxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBa0IsQ0FBQyxlQUFlLENBQUM7WUFFeEUsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNyRCxNQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSwyQ0FBMkMsQ0FBQyxDQUFDO2FBQzVFO1NBQ0Y7UUFFRCxP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