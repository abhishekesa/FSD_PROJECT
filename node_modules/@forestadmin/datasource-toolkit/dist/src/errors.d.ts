export declare class BusinessError extends Error {
    readonly data: Record<string, unknown> | undefined;
    constructor(message?: string, data?: Record<string, unknown>, name?: string);
    /**
     * We cannot rely on `instanceof` because there can be some mismatch between
     * packages versions as dependencies of different packages.
     * So this function is a workaround to check if an error is of a specific type.
     */
    static isOfType(error: Error, ErrorConstructor: new (...args: any[]) => Error): boolean;
}
export declare class ValidationError extends BusinessError {
}
export declare class UnprocessableError extends BusinessError {
}
export declare class ForbiddenError extends BusinessError {
}
export declare class IntrospectionFormatError extends BusinessError {
    constructor(sourcePackageName: '@forestadmin/datasource-sql' | '@forestadmin/datasource-mongo');
    /** @deprecated use name instead */
    get type(): string;
}
//# sourceMappingURL=errors.d.ts.map