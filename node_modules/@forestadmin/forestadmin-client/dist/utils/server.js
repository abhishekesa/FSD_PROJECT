"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const superagent_1 = __importDefault(require("superagent"));
const __1 = require("..");
class ServerUtils {
    /** Query Forest-Admin server */
    static async query(options, method, path, headers = {}, body, maxTimeAllowed = 10000) {
        try {
            const url = new URL(path, options.forestServerUrl).toString();
            const request = superagent_1.default[method](url).timeout(maxTimeAllowed);
            request.set('forest-secret-key', options.envSecret);
            if (headers)
                request.set(headers);
            const response = await request.send(body);
            return response.body;
        }
        catch (error) {
            if (error.timeout) {
                throw new Error('The request to Forest Admin server has timeout');
            }
            this.handleResponseError(error);
        }
    }
    static handleResponseError(e) {
        if (/certificate/i.test(e.message)) {
            throw new Error('Forest Admin server TLS certificate cannot be verified. ' +
                'Please check that your system time is set properly. ' +
                `Original error: ${e.message}`);
        }
        if (e.response) {
            const status = e?.response?.status;
            const message = e?.response?.body?.errors?.[0]?.detail;
            // 0 == offline, 502 == bad gateway from proxy
            if (status === 0 || status === 502) {
                throw new Error('Failed to reach Forest Admin server. Are you online?');
            }
            if (status === 403) {
                throw new __1.ForbiddenError(message);
            }
            if (status === 404) {
                throw new Error('Forest Admin server failed to find the' +
                    ' project related to the envSecret you configured.' +
                    ' Can you check that you copied it properly in the Forest initialization?');
            }
            if (status === 503) {
                throw new Error('Forest is in maintenance for a few minutes. We are upgrading your experience in ' +
                    'the forest. We just need a few more minutes to get it right.');
            }
            // If the server has something to say about the error, we display it.
            if (message)
                throw new Error(message);
            throw new Error('An unexpected error occurred while contacting the Forest Admin server. ' +
                'Please contact support@forestadmin.com for further investigations.');
        }
        throw e;
    }
}
exports.default = ServerUtils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDREQUF1RDtBQUV2RCwwQkFBb0M7QUFLcEMsTUFBcUIsV0FBVztJQUM5QixnQ0FBZ0M7SUFDaEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ2hCLE9BQW9CLEVBQ3BCLE1BQXlDLEVBQ3pDLElBQVksRUFDWixVQUFrQyxFQUFFLEVBQ3BDLElBQXNCLEVBQ3RCLGNBQWMsR0FBRyxLQUFLO1FBRXRCLElBQUk7WUFDRixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRTlELE1BQU0sT0FBTyxHQUFHLG9CQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRWhFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3BELElBQUksT0FBTztnQkFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRWxDLE1BQU0sUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUxQyxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUM7U0FDdEI7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNkLElBQUksS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO2FBQ25FO1lBRUQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVPLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFRO1FBQ3pDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEtBQUssQ0FDYiwwREFBMEQ7Z0JBQ3hELHNEQUFzRDtnQkFDdEQsbUJBQW1CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FDakMsQ0FBQztTQUNIO1FBRUQsSUFBSyxDQUFtQixDQUFDLFFBQVEsRUFBRTtZQUNqQyxNQUFNLE1BQU0sR0FBSSxDQUFtQixFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUM7WUFDdEQsTUFBTSxPQUFPLEdBQUksQ0FBbUIsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQztZQUUxRSw4Q0FBOEM7WUFDOUMsSUFBSSxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUU7Z0JBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0RBQXNELENBQUMsQ0FBQzthQUN6RTtZQUVELElBQUksTUFBTSxLQUFLLEdBQUcsRUFBRTtnQkFDbEIsTUFBTSxJQUFJLGtCQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDbkM7WUFFRCxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUU7Z0JBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQ2Isd0NBQXdDO29CQUN0QyxtREFBbUQ7b0JBQ25ELDBFQUEwRSxDQUM3RSxDQUFDO2FBQ0g7WUFFRCxJQUFJLE1BQU0sS0FBSyxHQUFHLEVBQUU7Z0JBQ2xCLE1BQU0sSUFBSSxLQUFLLENBQ2Isa0ZBQWtGO29CQUNoRiw4REFBOEQsQ0FDakUsQ0FBQzthQUNIO1lBRUQscUVBQXFFO1lBQ3JFLElBQUksT0FBTztnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRXRDLE1BQU0sSUFBSSxLQUFLLENBQ2IseUVBQXlFO2dCQUN2RSxvRUFBb0UsQ0FDdkUsQ0FBQztTQUNIO1FBRUQsTUFBTSxDQUFDLENBQUM7SUFDVixDQUFDO0NBQ0Y7QUE5RUQsOEJBOEVDIn0=